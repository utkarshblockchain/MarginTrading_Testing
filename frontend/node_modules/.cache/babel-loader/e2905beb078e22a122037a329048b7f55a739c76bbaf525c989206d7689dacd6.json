{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\components\\\\DepositCollateral.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositCollateral.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DepositCollateral = () => {\n  _s();\n  const {\n    web3,\n    contracts,\n    account,\n    isInitialized\n  } = useWeb3();\n  const [amount, setAmount] = useState('');\n  const [collateralType, setCollateralType] = useState('eth');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [approvalLoading, setApprovalLoading] = useState(false);\n  const [userMargin, setUserMargin] = useState('0');\n  const [userTokenMargin, setUserTokenMargin] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState('0');\n  const [allowance, setAllowance] = useState('0');\n\n  // Fetch user's margin balances\n  useEffect(() => {\n    const fetchMarginBalances = async () => {\n      if (!web3 || !contracts || !account) {\n        console.log(\"Web3, contracts, or account not initialized\");\n        return;\n      }\n      if (!contracts.marginTradeManager) {\n        console.log(\"Contract instances not initialized\", contracts);\n        return;\n      }\n      try {\n        // Try to get ETH margin\n        try {\n          // First try with userMargin function\n          const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n          setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n          console.log(\"ETH margin fetched:\", web3.utils.fromWei(ethMargin, 'ether'));\n        } catch (ethError) {\n          console.error(\"Error fetching ETH margin with userMargin:\", ethError);\n\n          // Fallback to checking the contract's balance\n          try {\n            const balance = await web3.eth.getBalance(account);\n            setUserMargin(web3.utils.fromWei(balance, 'ether'));\n            console.log(\"Using account ETH balance instead:\", web3.utils.fromWei(balance, 'ether'));\n          } catch (balanceError) {\n            console.error(\"Error fetching account balance:\", balanceError);\n          }\n        }\n\n        // Try to get token margin\n        try {\n          // First try with userTokenMargin function\n          const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n          setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n          console.log(\"Token margin fetched:\", web3.utils.fromWei(tokenMargin, 'ether'));\n        } catch (tokenError) {\n          console.error(\"Error fetching token margin with userTokenMargin:\", tokenError);\n          setUserTokenMargin('0');\n        }\n\n        // Fetch token balance\n        try {\n          const balance = await contracts.mockToken.methods.balanceOf(account).call();\n          setTokenBalance(web3.utils.fromWei(balance, 'ether'));\n          console.log(\"Token balance fetched:\", web3.utils.fromWei(balance, 'ether'));\n        } catch (balanceError) {\n          console.error(\"Error fetching token balance:\", balanceError);\n        }\n\n        // Fetch current allowance\n        try {\n          const currentAllowance = await contracts.mockToken.methods.allowance(account, contracts.marginTradeManager.options.address).call();\n          setAllowance(web3.utils.fromWei(currentAllowance, 'ether'));\n          console.log(\"Token allowance fetched:\", web3.utils.fromWei(currentAllowance, 'ether'));\n        } catch (allowanceError) {\n          console.error(\"Error fetching token allowance:\", allowanceError);\n        }\n      } catch (error) {\n        console.error(\"Error fetching margin balances:\", error);\n      }\n    };\n    if (web3 && contracts && account) {\n      fetchMarginBalances();\n\n      // Set up an interval to fetch margin balances every 10 seconds\n      const interval = setInterval(fetchMarginBalances, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [web3, contracts, account]);\n\n  // Function to handle token approval\n  const handleApproveToken = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account) {\n      setError(\"Web3 connection not established. Please connect your wallet.\");\n      return;\n    }\n    if (!contracts.mockToken || !contracts.marginTradeManager) {\n      setError(\"Contract instances not initialized. Please refresh the page.\");\n      return;\n    }\n    setApprovalLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const amountInWei = web3.utils.toWei(amount, 'ether');\n\n      // Approve tokens\n      await contracts.mockToken.methods.approve(contracts.marginTradeManager.options.address, amountInWei).send({\n        from: account\n      });\n\n      // Update allowance\n      const newAllowance = await contracts.mockToken.methods.allowance(account, contracts.marginTradeManager.options.address).call();\n      setAllowance(web3.utils.fromWei(newAllowance, 'ether'));\n      setSuccess(`Successfully approved ${amount} tokens!`);\n    } catch (error) {\n      console.error(\"Error approving tokens:\", error);\n      setError(error.message || \"Failed to approve tokens. Please try again.\");\n    } finally {\n      setApprovalLoading(false);\n    }\n  };\n  const handleDeposit = async e => {\n    e.preventDefault();\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account) {\n      setError(\"Web3 connection not established. Please connect your wallet.\");\n      return;\n    }\n    if (!contracts.marginTradeManager) {\n      setError(\"Contract instances not initialized. Please refresh the page.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const amountInWei = web3.utils.toWei(amount, 'ether');\n      if (collateralType === 'eth') {\n        // Deposit ETH\n        await contracts.marginTradeManager.methods.depositMargin().send({\n          from: account,\n          value: amountInWei\n        });\n        setSuccess(`Successfully deposited ${amount} ETH!`);\n      } else {\n        // Check if allowance is sufficient\n        if (parseFloat(allowance) < parseFloat(amount)) {\n          setError(`Insufficient allowance. Please approve at least ${amount} tokens first.`);\n          setLoading(false);\n          return;\n        }\n\n        // Deposit tokens\n        await contracts.marginTradeManager.methods.depositMarginERC20(contracts.mockToken.options.address, amountInWei).send({\n          from: account\n        });\n        setSuccess(`Successfully deposited ${amount} tokens!`);\n      }\n\n      // Refresh balances\n      const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n      setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n      const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n      setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n\n      // Reset form\n      setAmount('');\n    } catch (error) {\n      console.error(\"Error depositing collateral:\", error);\n      setError(error.message || \"Failed to deposit collateral. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleWithdraw = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account) {\n      setError(\"Web3 connection not established. Please connect your wallet.\");\n      return;\n    }\n    if (!contracts.marginTradeManager) {\n      setError(\"Contract instances not initialized. Please refresh the page.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const amountInWei = web3.utils.toWei(amount, 'ether');\n\n      // Withdraw margin\n      // Note: This assumes there's a withdrawMargin function in the contract\n      // You may need to adjust this based on your actual contract implementation\n      await contracts.marginTradeManager.methods.withdrawMargin(0, amountInWei) // Assuming position ID 0 for now\n      .send({\n        from: account\n      });\n      setSuccess(`Successfully withdrew ${amount} ${collateralType === 'eth' ? 'ETH' : 'tokens'}!`);\n\n      // Refresh balances\n      const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n      setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n      const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n      setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n\n      // Reset form\n      setAmount('');\n    } catch (error) {\n      console.error(\"Error withdrawing collateral:\", error);\n      setError(error.message || \"Failed to withdraw collateral. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deposit-collateral-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deposit/Withdraw Collateral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this), !isInitialized && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning-message\",\n      children: \"Waiting for contract initialization... Please make sure you're connected to the Sepolia testnet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balance-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"ETH Margin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-value\",\n          children: [parseFloat(userMargin).toFixed(4), \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Token Margin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-value\",\n          children: [parseFloat(userTokenMargin).toFixed(2), \" Tokens\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), collateralType === 'token' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Token Balance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"balance-value\",\n            children: [parseFloat(tokenBalance).toFixed(2), \" Tokens\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Token Allowance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"balance-value\",\n            children: [parseFloat(allowance).toFixed(2), \" Tokens\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDeposit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"amount\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          step: \"0.01\",\n          min: \"0.01\",\n          placeholder: \"0.1\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"collateralType\",\n          children: \"Collateral Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"collateral-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `collateral-btn ${collateralType === 'eth' ? 'active' : ''}`,\n            onClick: () => setCollateralType('eth'),\n            children: \"ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `collateral-btn ${collateralType === 'token' ? 'active' : ''}`,\n            onClick: () => setCollateralType('token'),\n            children: \"Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [collateralType === 'token' && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleApproveToken,\n          disabled: approvalLoading || !amount || !isInitialized,\n          className: \"action-button approve-button\",\n          children: approvalLoading ? 'Approving...' : 'Approve Tokens'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading || !amount || !isInitialized || collateralType === 'token' && parseFloat(allowance) < parseFloat(amount),\n          className: \"action-button deposit-button\",\n          children: loading ? 'Processing...' : 'Deposit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleWithdraw,\n          disabled: loading || !amount || !isInitialized,\n          className: \"action-button withdraw-button\",\n          children: loading ? 'Processing...' : 'Withdraw'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositCollateral, \"b44IL8MksHcAoiaNuVz3qR/66uc=\", false, function () {\n  return [useWeb3];\n});\n_c = DepositCollateral;\nexport default DepositCollateral;\nvar _c;\n$RefreshReg$(_c, \"DepositCollateral\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3","jsxDEV","_jsxDEV","Fragment","_Fragment","DepositCollateral","_s","web3","contracts","account","isInitialized","amount","setAmount","collateralType","setCollateralType","loading","setLoading","error","setError","success","setSuccess","approvalLoading","setApprovalLoading","userMargin","setUserMargin","userTokenMargin","setUserTokenMargin","tokenBalance","setTokenBalance","allowance","setAllowance","fetchMarginBalances","console","log","marginTradeManager","ethMargin","methods","call","utils","fromWei","ethError","balance","eth","getBalance","balanceError","tokenMargin","mockToken","options","address","tokenError","balanceOf","currentAllowance","allowanceError","interval","setInterval","clearInterval","handleApproveToken","parseFloat","amountInWei","toWei","approve","send","from","newAllowance","message","handleDeposit","e","preventDefault","depositMargin","value","depositMarginERC20","handleWithdraw","withdrawMargin","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onSubmit","htmlFor","type","id","onChange","target","step","min","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/components/DepositCollateral.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositCollateral.css';\n\nconst DepositCollateral = () => {\n    const { web3, contracts, account, isInitialized } = useWeb3();\n    const [amount, setAmount] = useState('');\n    const [collateralType, setCollateralType] = useState('eth');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(null);\n    const [approvalLoading, setApprovalLoading] = useState(false);\n    const [userMargin, setUserMargin] = useState('0');\n    const [userTokenMargin, setUserTokenMargin] = useState('0');\n    const [tokenBalance, setTokenBalance] = useState('0');\n    const [allowance, setAllowance] = useState('0');\n\n    // Fetch user's margin balances\n    useEffect(() => {\n        const fetchMarginBalances = async () => {\n            if (!web3 || !contracts || !account) {\n                console.log(\"Web3, contracts, or account not initialized\");\n                return;\n            }\n\n            if (!contracts.marginTradeManager) {\n                console.log(\"Contract instances not initialized\", contracts);\n                return;\n            }\n\n            try {\n                // Try to get ETH margin\n                try {\n                    // First try with userMargin function\n                    const ethMargin = await contracts.marginTradeManager.methods\n                        .userMargin(account)\n                        .call();\n                    setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n                    console.log(\"ETH margin fetched:\", web3.utils.fromWei(ethMargin, 'ether'));\n                } catch (ethError) {\n                    console.error(\"Error fetching ETH margin with userMargin:\", ethError);\n                    \n                    // Fallback to checking the contract's balance\n                    try {\n                        const balance = await web3.eth.getBalance(account);\n                        setUserMargin(web3.utils.fromWei(balance, 'ether'));\n                        console.log(\"Using account ETH balance instead:\", web3.utils.fromWei(balance, 'ether'));\n                    } catch (balanceError) {\n                        console.error(\"Error fetching account balance:\", balanceError);\n                    }\n                }\n\n                // Try to get token margin\n                try {\n                    // First try with userTokenMargin function\n                    const tokenMargin = await contracts.marginTradeManager.methods\n                        .userTokenMargin(account, contracts.mockToken.options.address)\n                        .call();\n                    setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n                    console.log(\"Token margin fetched:\", web3.utils.fromWei(tokenMargin, 'ether'));\n                } catch (tokenError) {\n                    console.error(\"Error fetching token margin with userTokenMargin:\", tokenError);\n                    setUserTokenMargin('0');\n                }\n\n                // Fetch token balance\n                try {\n                    const balance = await contracts.mockToken.methods\n                        .balanceOf(account)\n                        .call();\n                    setTokenBalance(web3.utils.fromWei(balance, 'ether'));\n                    console.log(\"Token balance fetched:\", web3.utils.fromWei(balance, 'ether'));\n                } catch (balanceError) {\n                    console.error(\"Error fetching token balance:\", balanceError);\n                }\n\n                // Fetch current allowance\n                try {\n                    const currentAllowance = await contracts.mockToken.methods\n                        .allowance(account, contracts.marginTradeManager.options.address)\n                        .call();\n                    setAllowance(web3.utils.fromWei(currentAllowance, 'ether'));\n                    console.log(\"Token allowance fetched:\", web3.utils.fromWei(currentAllowance, 'ether'));\n                } catch (allowanceError) {\n                    console.error(\"Error fetching token allowance:\", allowanceError);\n                }\n            } catch (error) {\n                console.error(\"Error fetching margin balances:\", error);\n            }\n        };\n\n        if (web3 && contracts && account) {\n            fetchMarginBalances();\n            \n            // Set up an interval to fetch margin balances every 10 seconds\n            const interval = setInterval(fetchMarginBalances, 10000);\n            \n            return () => clearInterval(interval);\n        }\n    }, [web3, contracts, account]);\n\n    // Function to handle token approval\n    const handleApproveToken = async () => {\n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account) {\n            setError(\"Web3 connection not established. Please connect your wallet.\");\n            return;\n        }\n\n        if (!contracts.mockToken || !contracts.marginTradeManager) {\n            setError(\"Contract instances not initialized. Please refresh the page.\");\n            return;\n        }\n\n        setApprovalLoading(true);\n        setError(null);\n        setSuccess(null);\n\n        try {\n            const amountInWei = web3.utils.toWei(amount, 'ether');\n            \n            // Approve tokens\n            await contracts.mockToken.methods\n                .approve(contracts.marginTradeManager.options.address, amountInWei)\n                .send({ from: account });\n            \n            // Update allowance\n            const newAllowance = await contracts.mockToken.methods\n                .allowance(account, contracts.marginTradeManager.options.address)\n                .call();\n            \n            setAllowance(web3.utils.fromWei(newAllowance, 'ether'));\n            setSuccess(`Successfully approved ${amount} tokens!`);\n        } catch (error) {\n            console.error(\"Error approving tokens:\", error);\n            setError(error.message || \"Failed to approve tokens. Please try again.\");\n        } finally {\n            setApprovalLoading(false);\n        }\n    };\n\n    const handleDeposit = async (e) => {\n        e.preventDefault();\n        \n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account) {\n            setError(\"Web3 connection not established. Please connect your wallet.\");\n            return;\n        }\n\n        if (!contracts.marginTradeManager) {\n            setError(\"Contract instances not initialized. Please refresh the page.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setSuccess(null);\n\n        try {\n            const amountInWei = web3.utils.toWei(amount, 'ether');\n            \n            if (collateralType === 'eth') {\n                // Deposit ETH\n                await contracts.marginTradeManager.methods\n                    .depositMargin()\n                    .send({ from: account, value: amountInWei });\n                \n                setSuccess(`Successfully deposited ${amount} ETH!`);\n            } else {\n                // Check if allowance is sufficient\n                if (parseFloat(allowance) < parseFloat(amount)) {\n                    setError(`Insufficient allowance. Please approve at least ${amount} tokens first.`);\n                    setLoading(false);\n                    return;\n                }\n                \n                // Deposit tokens\n                await contracts.marginTradeManager.methods\n                    .depositMarginERC20(contracts.mockToken.options.address, amountInWei)\n                    .send({ from: account });\n                \n                setSuccess(`Successfully deposited ${amount} tokens!`);\n            }\n            \n            // Refresh balances\n            const ethMargin = await contracts.marginTradeManager.methods\n                .userMargin(account)\n                .call();\n            setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n            \n            const tokenMargin = await contracts.marginTradeManager.methods\n                .userTokenMargin(account, contracts.mockToken.options.address)\n                .call();\n            setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n            \n            // Reset form\n            setAmount('');\n        } catch (error) {\n            console.error(\"Error depositing collateral:\", error);\n            setError(error.message || \"Failed to deposit collateral. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleWithdraw = async () => {\n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account) {\n            setError(\"Web3 connection not established. Please connect your wallet.\");\n            return;\n        }\n\n        if (!contracts.marginTradeManager) {\n            setError(\"Contract instances not initialized. Please refresh the page.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setSuccess(null);\n\n        try {\n            const amountInWei = web3.utils.toWei(amount, 'ether');\n            \n            // Withdraw margin\n            // Note: This assumes there's a withdrawMargin function in the contract\n            // You may need to adjust this based on your actual contract implementation\n            await contracts.marginTradeManager.methods\n                .withdrawMargin(0, amountInWei) // Assuming position ID 0 for now\n                .send({ from: account });\n            \n            setSuccess(`Successfully withdrew ${amount} ${collateralType === 'eth' ? 'ETH' : 'tokens'}!`);\n            \n            // Refresh balances\n            const ethMargin = await contracts.marginTradeManager.methods\n                .userMargin(account)\n                .call();\n            setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n            \n            const tokenMargin = await contracts.marginTradeManager.methods\n                .userTokenMargin(account, contracts.mockToken.options.address)\n                .call();\n            setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n            \n            // Reset form\n            setAmount('');\n        } catch (error) {\n            console.error(\"Error withdrawing collateral:\", error);\n            setError(error.message || \"Failed to withdraw collateral. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"deposit-collateral-container\">\n            <h2>Deposit/Withdraw Collateral</h2>\n            \n            {!isInitialized && (\n                <div className=\"warning-message\">\n                    Waiting for contract initialization... Please make sure you're connected to the Sepolia testnet.\n                </div>\n            )}\n            \n            <div className=\"balance-container\">\n                <div className=\"balance-item\">\n                    <span>ETH Margin:</span>\n                    <span className=\"balance-value\">{parseFloat(userMargin).toFixed(4)} ETH</span>\n                </div>\n                <div className=\"balance-item\">\n                    <span>Token Margin:</span>\n                    <span className=\"balance-value\">{parseFloat(userTokenMargin).toFixed(2)} Tokens</span>\n                </div>\n                {collateralType === 'token' && (\n                    <>\n                        <div className=\"balance-item\">\n                            <span>Token Balance:</span>\n                            <span className=\"balance-value\">{parseFloat(tokenBalance).toFixed(2)} Tokens</span>\n                        </div>\n                        <div className=\"balance-item\">\n                            <span>Token Allowance:</span>\n                            <span className=\"balance-value\">{parseFloat(allowance).toFixed(2)} Tokens</span>\n                        </div>\n                    </>\n                )}\n            </div>\n            \n            <form onSubmit={handleDeposit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"amount\">Amount</label>\n                    <input\n                        type=\"number\"\n                        id=\"amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                        step=\"0.01\"\n                        min=\"0.01\"\n                        placeholder=\"0.1\"\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"collateralType\">Collateral Type</label>\n                    <div className=\"collateral-selector\">\n                        <button \n                            type=\"button\" \n                            className={`collateral-btn ${collateralType === 'eth' ? 'active' : ''}`}\n                            onClick={() => setCollateralType('eth')}\n                        >\n                            ETH\n                        </button>\n                        <button \n                            type=\"button\" \n                            className={`collateral-btn ${collateralType === 'token' ? 'active' : ''}`}\n                            onClick={() => setCollateralType('token')}\n                        >\n                            Token\n                        </button>\n                    </div>\n                </div>\n\n                {error && <div className=\"error-message\">{error}</div>}\n                {success && <div className=\"success-message\">{success}</div>}\n\n                <div className=\"button-group\">\n                    {collateralType === 'token' && (\n                        <button \n                            type=\"button\" \n                            onClick={handleApproveToken}\n                            disabled={approvalLoading || !amount || !isInitialized} \n                            className=\"action-button approve-button\"\n                        >\n                            {approvalLoading ? 'Approving...' : 'Approve Tokens'}\n                        </button>\n                    )}\n                    <button \n                        type=\"submit\" \n                        disabled={loading || !amount || !isInitialized || \n                                (collateralType === 'token' && parseFloat(allowance) < parseFloat(amount))} \n                        className=\"action-button deposit-button\"\n                    >\n                        {loading ? 'Processing...' : 'Deposit'}\n                    </button>\n                    <button \n                        type=\"button\"\n                        onClick={handleWithdraw}\n                        disabled={loading || !amount || !isInitialized} \n                        className=\"action-button withdraw-button\"\n                    >\n                        {loading ? 'Processing...' : 'Withdraw'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default DepositCollateral;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}