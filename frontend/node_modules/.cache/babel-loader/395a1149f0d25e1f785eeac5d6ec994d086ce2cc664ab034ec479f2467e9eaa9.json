{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet - UPDATED WITH NEWLY DEPLOYED CONTRACTS\nconst CONTRACT_ADDRESSES = {\n  marginTradeManager: \"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",\n  mockToken: \"0x6399a31B08986628EAdfD6e616E58db75f6686f2\",\n  liquidationEngine: \"0xc128F74caBB74b5797e0d8727b91bA3BA4F67647\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState({\n    marginTradeManager: null,\n    mockToken: null,\n    liquidationEngine: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [userMargin, setUserMargin] = useState('0');\n  const [userTokenMargin, setUserTokenMargin] = useState('0');\n\n  // Initialize contracts\n  const initializeContracts = useCallback(async (web3Instance, networkId) => {\n    console.log(\"Initializing contracts...\");\n    try {\n      if (!web3Instance) {\n        console.error(\"Web3 instance is null\");\n        setError(\"Web3 instance is not available. Please refresh the page.\");\n        return false;\n      }\n      try {\n        // Create contract instances\n        const marginTradeManagerContract = new web3Instance.eth.Contract(MarginTradeManagerABI.abi, CONTRACT_ADDRESSES.marginTradeManager);\n        const mockTokenContract = new web3Instance.eth.Contract(MockTokenABI.abi, CONTRACT_ADDRESSES.mockToken);\n        const liquidationEngineContract = new web3Instance.eth.Contract(LiquidationEngineABI.abi, CONTRACT_ADDRESSES.liquidationEngine);\n\n        // Set the contracts in state without verification\n        setContracts({\n          marginTradeManager: marginTradeManagerContract,\n          mockToken: mockTokenContract,\n          liquidationEngine: liquidationEngineContract\n        });\n        console.log(\"Contracts initialized successfully:\", {\n          marginTradeManager: marginTradeManagerContract.options.address,\n          mockToken: mockTokenContract.options.address,\n          liquidationEngine: liquidationEngineContract.options.address\n        });\n        setIsInitialized(true);\n        setLoading(false);\n        return true;\n      } catch (contractError) {\n        console.error(\"Error creating contract instances:\", contractError);\n        setError(\"Failed to create contract instances. Please check your network connection.\");\n        setLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n      setLoading(false);\n      return false;\n    }\n  }, []);\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        setLoading(true);\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        console.log(\"Wallet connected:\", accounts[0]);\n\n        // Re-initialize contracts if they weren't initialized before\n        if (!isInitialized && web3) {\n          const networkId = await web3.eth.net.getId();\n          const success = await initializeContracts(web3, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        }\n        setLoading(false);\n        return true;\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n        setLoading(false);\n        return false;\n      }\n    } else {\n      setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      return false;\n    }\n  };\n\n  // Initialize web3 and contracts when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n        let web3Instance;\n\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          web3Instance = new Web3(window.ethereum);\n          console.log(\"Using window.ethereum provider\");\n          try {\n            // Request account access\n            const accounts = await window.ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n            setAccount(accounts[0]);\n            console.log(\"Connected account:\", accounts[0]);\n\n            // Get network ID\n            const networkId = await web3Instance.eth.net.getId();\n            setNetworkId(networkId);\n            console.log(\"Connected to network ID:\", networkId);\n\n            // Check if connected to Sepolia (network ID 11155111)\n            if (networkId !== 11155111) {\n              console.warn(\"Not connected to Sepolia testnet. Please switch networks in MetaMask.\");\n              setError(\"Please connect to the Sepolia testnet in your MetaMask wallet.\");\n            }\n            setWeb3(web3Instance);\n\n            // Initialize contracts\n            const success = await initializeContracts(web3Instance, networkId);\n            if (success) {\n              setIsInitialized(true);\n            }\n          } catch (error) {\n            console.error(\"User denied account access or there was an error:\", error);\n            setError(\"Failed to connect to your wallet. Please try again.\");\n          }\n        } else if (window.web3) {\n          // Legacy dapp browsers\n          web3Instance = new Web3(window.web3.currentProvider);\n          console.log(\"Using legacy web3 provider\");\n\n          // Get accounts\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n          console.log(\"Connected account:\", accounts[0]);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n          console.log(\"Connected to network ID:\", networkId);\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          const success = await initializeContracts(web3Instance, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        } else {\n          console.error(\"No Ethereum browser extension detected\");\n          setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(\"Error initializing web3:\", error);\n        setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        setLoading(false);\n      }\n    };\n    init();\n\n    // Setup event listeners for MetaMask\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          console.log(\"Account changed:\", accounts[0]);\n        } else {\n          setAccount(null);\n          console.log(\"Account disconnected\");\n        }\n      });\n      window.ethereum.on('chainChanged', () => {\n        console.log(\"Network changed, reloading page\");\n        window.location.reload();\n      });\n    }\n  }, [initializeContracts]);\n\n  // Fetch user margin data\n  useEffect(() => {\n    const fetchUserMargin = async () => {\n      if (web3 && contracts.marginTradeManager && account && isInitialized) {\n        try {\n          console.log(\"Fetching user margin data...\");\n\n          // Try to get ETH margin and token margin using the contract functions\n          try {\n            // Try to call userMargin function\n            const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n            setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n\n            // Try to call userTokenMargin function\n            const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n            setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n            console.log(\"User margins fetched:\", {\n              ethMargin: web3.utils.fromWei(ethMargin, 'ether'),\n              tokenMargin: web3.utils.fromWei(tokenMargin, 'ether')\n            });\n          } catch (error) {\n            console.error(\"Error fetching ETH margin with userMargin:\", error);\n\n            // Fallback: Calculate margins by iterating through positions\n            try {\n              // Get user position count\n              const positionCount = await contracts.marginTradeManager.methods.userPositionCount(account).call();\n              console.log(\"User position count:\", positionCount);\n              let totalEthMargin = web3.utils.toBN('0');\n              let totalTokenMargin = web3.utils.toBN('0');\n\n              // Iterate through all positions\n              for (let i = 0; i < positionCount; i++) {\n                const position = await contracts.marginTradeManager.methods.positions(account, i).call();\n                const margin = web3.utils.toBN(position.margin);\n\n                // Check if this is ETH or token position\n                if (position.collateralToken === '0x0000000000000000000000000000000000000000') {\n                  totalEthMargin = totalEthMargin.add(margin);\n                } else if (position.collateralToken === contracts.mockToken.options.address) {\n                  totalTokenMargin = totalTokenMargin.add(margin);\n                }\n              }\n              setUserMargin(web3.utils.fromWei(totalEthMargin, 'ether'));\n              setUserTokenMargin(web3.utils.fromWei(totalTokenMargin, 'ether'));\n              console.log(\"User margins calculated manually:\", {\n                ethMargin: web3.utils.fromWei(totalEthMargin, 'ether'),\n                tokenMargin: web3.utils.fromWei(totalTokenMargin, 'ether')\n              });\n            } catch (fallbackError) {\n              console.error(\"Error calculating margins manually:\", fallbackError);\n              setUserMargin('0');\n              setUserTokenMargin('0');\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching user margin:\", error);\n          setUserMargin('0');\n          setUserTokenMargin('0');\n        }\n      }\n    };\n    if (isInitialized) {\n      fetchUserMargin();\n\n      // Set up an interval to fetch user margin every 30 seconds\n      const intervalId = setInterval(fetchUserMargin, 30000);\n      return () => clearInterval(intervalId);\n    }\n  }, [web3, contracts, account, isInitialized]);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      account,\n      networkId,\n      contracts,\n      loading,\n      error,\n      connectWallet,\n      isInitialized,\n      userMargin,\n      userTokenMargin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"BMLqveW8mrwSmtpjHdLCo8rZFjE=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","LiquidationEngineABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTradeManager","mockToken","liquidationEngine","useWeb3","_s","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","isInitialized","setIsInitialized","userMargin","setUserMargin","userTokenMargin","setUserTokenMargin","initializeContracts","web3Instance","console","log","marginTradeManagerContract","eth","Contract","abi","mockTokenContract","liquidationEngineContract","options","address","contractError","connectWallet","window","ethereum","accounts","request","method","net","getId","success","init","warn","currentProvider","getAccounts","on","length","location","reload","fetchUserMargin","ethMargin","methods","call","utils","fromWei","tokenMargin","positionCount","userPositionCount","totalEthMargin","toBN","totalTokenMargin","i","position","positions","margin","collateralToken","add","fallbackError","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; \n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet - UPDATED WITH NEWLY DEPLOYED CONTRACTS\nconst CONTRACT_ADDRESSES = {\n    marginTradeManager: \"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",\n    mockToken: \"0x6399a31B08986628EAdfD6e616E58db75f6686f2\",\n    liquidationEngine: \"0xc128F74caBB74b5797e0d8727b91bA3BA4F67647\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTradeManager: null,\n        mockToken: null,\n        liquidationEngine: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [userMargin, setUserMargin] = useState('0');\n    const [userTokenMargin, setUserTokenMargin] = useState('0');\n\n    // Initialize contracts\n    const initializeContracts = useCallback(async (web3Instance, networkId) => {\n        console.log(\"Initializing contracts...\");\n        try {\n            if (!web3Instance) {\n                console.error(\"Web3 instance is null\");\n                setError(\"Web3 instance is not available. Please refresh the page.\");\n                return false;\n            }\n\n            try {\n                // Create contract instances\n                const marginTradeManagerContract = new web3Instance.eth.Contract(\n                    MarginTradeManagerABI.abi,\n                    CONTRACT_ADDRESSES.marginTradeManager\n                );\n\n                const mockTokenContract = new web3Instance.eth.Contract(\n                    MockTokenABI.abi,\n                    CONTRACT_ADDRESSES.mockToken\n                );\n\n                const liquidationEngineContract = new web3Instance.eth.Contract(\n                    LiquidationEngineABI.abi,\n                    CONTRACT_ADDRESSES.liquidationEngine\n                );\n\n                // Set the contracts in state without verification\n                setContracts({\n                    marginTradeManager: marginTradeManagerContract,\n                    mockToken: mockTokenContract,\n                    liquidationEngine: liquidationEngineContract\n                });\n\n                console.log(\"Contracts initialized successfully:\", {\n                    marginTradeManager: marginTradeManagerContract.options.address,\n                    mockToken: mockTokenContract.options.address,\n                    liquidationEngine: liquidationEngineContract.options.address\n                });\n                \n                setIsInitialized(true);\n                setLoading(false);\n                return true;\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to create contract instances. Please check your network connection.\");\n                setLoading(false);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            setLoading(false);\n            return false;\n        }\n    }, []);\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                setLoading(true);\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n                console.log(\"Wallet connected:\", accounts[0]);\n                \n                // Re-initialize contracts if they weren't initialized before\n                if (!isInitialized && web3) {\n                    const networkId = await web3.eth.net.getId();\n                    const success = await initializeContracts(web3, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                }\n                \n                setLoading(false);\n                return true;\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n                setLoading(false);\n                return false;\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            return false;\n        }\n    };\n\n    // Initialize web3 and contracts when the component mounts\n    useEffect(() => {\n        const init = async () => {\n            try {\n                setLoading(true);\n                let web3Instance;\n                \n                // Check if MetaMask is installed\n                if (window.ethereum) {\n                    web3Instance = new Web3(window.ethereum);\n                    console.log(\"Using window.ethereum provider\");\n                    \n                    try {\n                        // Request account access\n                        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                        setAccount(accounts[0]);\n                        console.log(\"Connected account:\", accounts[0]);\n                        \n                        // Get network ID\n                        const networkId = await web3Instance.eth.net.getId();\n                        setNetworkId(networkId);\n                        console.log(\"Connected to network ID:\", networkId);\n                        \n                        // Check if connected to Sepolia (network ID 11155111)\n                        if (networkId !== 11155111) {\n                            console.warn(\"Not connected to Sepolia testnet. Please switch networks in MetaMask.\");\n                            setError(\"Please connect to the Sepolia testnet in your MetaMask wallet.\");\n                        }\n                        \n                        setWeb3(web3Instance);\n                        \n                        // Initialize contracts\n                        const success = await initializeContracts(web3Instance, networkId);\n                        if (success) {\n                            setIsInitialized(true);\n                        }\n                        \n                    } catch (error) {\n                        console.error(\"User denied account access or there was an error:\", error);\n                        setError(\"Failed to connect to your wallet. Please try again.\");\n                    }\n                } else if (window.web3) {\n                    // Legacy dapp browsers\n                    web3Instance = new Web3(window.web3.currentProvider);\n                    console.log(\"Using legacy web3 provider\");\n                    \n                    // Get accounts\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n                    console.log(\"Connected account:\", accounts[0]);\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    console.log(\"Connected to network ID:\", networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    const success = await initializeContracts(web3Instance, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                    \n                } else {\n                    console.error(\"No Ethereum browser extension detected\");\n                    setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.error(\"Error initializing web3:\", error);\n                setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n                setLoading(false);\n            }\n        };\n        \n        init();\n        \n        // Setup event listeners for MetaMask\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    console.log(\"Account changed:\", accounts[0]);\n                } else {\n                    setAccount(null);\n                    console.log(\"Account disconnected\");\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                console.log(\"Network changed, reloading page\");\n                window.location.reload();\n            });\n        }\n        \n    }, [initializeContracts]);\n\n    // Fetch user margin data\n    useEffect(() => {\n        const fetchUserMargin = async () => {\n            if (web3 && contracts.marginTradeManager && account && isInitialized) {\n                try {\n                    console.log(\"Fetching user margin data...\");\n                    \n                    // Try to get ETH margin and token margin using the contract functions\n                    try {\n                        // Try to call userMargin function\n                        const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n                        setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n                        \n                        // Try to call userTokenMargin function\n                        const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(\n                            account, \n                            contracts.mockToken.options.address\n                        ).call();\n                        setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n                        \n                        console.log(\"User margins fetched:\", {\n                            ethMargin: web3.utils.fromWei(ethMargin, 'ether'),\n                            tokenMargin: web3.utils.fromWei(tokenMargin, 'ether')\n                        });\n                    } catch (error) {\n                        console.error(\"Error fetching ETH margin with userMargin:\", error);\n                        \n                        // Fallback: Calculate margins by iterating through positions\n                        try {\n                            // Get user position count\n                            const positionCount = await contracts.marginTradeManager.methods.userPositionCount(account).call();\n                            console.log(\"User position count:\", positionCount);\n                            \n                            let totalEthMargin = web3.utils.toBN('0');\n                            let totalTokenMargin = web3.utils.toBN('0');\n                            \n                            // Iterate through all positions\n                            for (let i = 0; i < positionCount; i++) {\n                                const position = await contracts.marginTradeManager.methods.positions(account, i).call();\n                                const margin = web3.utils.toBN(position.margin);\n                                \n                                // Check if this is ETH or token position\n                                if (position.collateralToken === '0x0000000000000000000000000000000000000000') {\n                                    totalEthMargin = totalEthMargin.add(margin);\n                                } else if (position.collateralToken === contracts.mockToken.options.address) {\n                                    totalTokenMargin = totalTokenMargin.add(margin);\n                                }\n                            }\n                            \n                            setUserMargin(web3.utils.fromWei(totalEthMargin, 'ether'));\n                            setUserTokenMargin(web3.utils.fromWei(totalTokenMargin, 'ether'));\n                            \n                            console.log(\"User margins calculated manually:\", {\n                                ethMargin: web3.utils.fromWei(totalEthMargin, 'ether'),\n                                tokenMargin: web3.utils.fromWei(totalTokenMargin, 'ether')\n                            });\n                        } catch (fallbackError) {\n                            console.error(\"Error calculating margins manually:\", fallbackError);\n                            setUserMargin('0');\n                            setUserTokenMargin('0');\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching user margin:\", error);\n                    setUserMargin('0');\n                    setUserTokenMargin('0');\n                }\n            }\n        };\n        \n        if (isInitialized) {\n            fetchUserMargin();\n            \n            // Set up an interval to fetch user margin every 30 seconds\n            const intervalId = setInterval(fetchUserMargin, 30000);\n            \n            return () => clearInterval(intervalId);\n        }\n    }, [web3, contracts, account, isInitialized]);\n\n    return (\n        <Web3Context.Provider value={{ \n            web3, \n            account, \n            networkId, \n            contracts, \n            loading, \n            error,\n            connectWallet,\n            isInitialized,\n            userMargin,\n            userTokenMargin\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}