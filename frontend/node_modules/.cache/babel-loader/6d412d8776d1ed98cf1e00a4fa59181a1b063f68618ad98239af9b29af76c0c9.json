{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed ABI for now\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n  marginTrading: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n  mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n  liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState({\n    marginTrading: null,\n    mockToken: null,\n    liquidationEngine: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [ethPrice, setEthPrice] = useState('1500.00'); // Default price\n\n  // Initialize web3\n  const initializeWeb3 = useCallback(async () => {\n    try {\n      let web3Instance;\n\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        web3Instance = new Web3(window.ethereum);\n        try {\n          // Request account access\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          setAccount(accounts[0]);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          await initializeContracts(web3Instance, networkId);\n        } catch (error) {\n          console.error(\"User denied account access or there was an error:\", error);\n          setError(\"Failed to connect to your wallet. Please try again.\");\n        }\n      } else if (window.web3) {\n        // Legacy dapp browsers\n        web3Instance = new Web3(window.web3.currentProvider);\n\n        // Get accounts\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccount(accounts[0]);\n\n        // Get network ID\n        const networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n        setWeb3(web3Instance);\n\n        // Initialize contracts\n        await initializeContracts(web3Instance, networkId);\n      } else {\n        console.error(\"No Ethereum browser extension detected\");\n        setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing web3:\", error);\n      setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      console.log(\"Initializing contracts for network ID:\", networkId);\n\n      // Use the contract addresses from the constant\n      const marginTradingAddress = CONTRACT_ADDRESSES.marginTrading;\n      const mockTokenAddress = CONTRACT_ADDRESSES.mockToken;\n      const liquidationEngineAddress = CONTRACT_ADDRESSES.liquidationEngine;\n      console.log(\"Using contract addresses:\", {\n        marginTradingAddress,\n        mockTokenAddress,\n        liquidationEngineAddress\n      });\n\n      // Initialize contract instances\n      const marginTradingContract = new web3Instance.eth.Contract(MarginTradeManagerABI, marginTradingAddress);\n      const mockTokenContract = new web3Instance.eth.Contract(MockTokenABI, mockTokenAddress);\n      const liquidationEngineContract = new web3Instance.eth.Contract(LiquidationEngineABI, liquidationEngineAddress);\n\n      // Set the contracts in state\n      setContracts({\n        marginTrading: marginTradingContract,\n        mockToken: mockTokenContract,\n        liquidationEngine: liquidationEngineContract\n      });\n      console.log(\"Contracts initialized successfully\");\n      return true;\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n      return false;\n    }\n  };\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n    }\n  };\n\n  // Fetch ETH price (simulated for now)\n  const fetchEthPrice = async () => {\n    try {\n      // In a real application, you would fetch this from an API or oracle\n      // For now, we'll use a simulated price\n      const simulatedPrice = Math.floor(1800 + Math.random() * 200).toString();\n      setEthPrice(simulatedPrice);\n    } catch (error) {\n      console.error(\"Error fetching ETH price:\", error);\n    }\n  };\n\n  // Fetch ETH price on component mount and when account changes\n  useEffect(() => {\n    if (web3 && account) {\n      fetchEthPrice();\n    }\n  }, [web3, account]);\n\n  // Initialize web3 and contracts when the component mounts\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        } else {\n          setAccount(null);\n        }\n      });\n      window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n      });\n    }\n    initializeWeb3();\n  }, [initializeWeb3]);\n\n  // Set up interval to refresh ETH price\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (web3 && account) {\n        fetchEthPrice();\n      }\n    }, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [web3, account]);\n\n  // Context value\n  const contextValue = {\n    web3,\n    account,\n    networkId,\n    contracts,\n    loading,\n    error,\n    ethPrice,\n    connectWallet\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"k/imU9b0rvclDDNVlkCcyzmM6lo=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","LiquidationEngineABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTrading","mockToken","liquidationEngine","useWeb3","_s","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","ethPrice","setEthPrice","initializeWeb3","web3Instance","window","ethereum","accounts","request","method","eth","net","getId","initializeContracts","console","currentProvider","getAccounts","log","marginTradingAddress","mockTokenAddress","liquidationEngineAddress","marginTradingContract","Contract","mockTokenContract","liquidationEngineContract","connectWallet","fetchEthPrice","simulatedPrice","Math","floor","random","toString","on","length","location","reload","interval","setInterval","clearInterval","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed ABI for now\n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n    marginTrading: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n    mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n    liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTrading: null,\n        mockToken: null,\n        liquidationEngine: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [ethPrice, setEthPrice] = useState('1500.00'); // Default price\n\n    // Initialize web3\n    const initializeWeb3 = useCallback(async () => {\n        try {\n            let web3Instance;\n            \n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                web3Instance = new Web3(window.ethereum);\n                \n                try {\n                    // Request account access\n                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    setAccount(accounts[0]);\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    await initializeContracts(web3Instance, networkId);\n                    \n                } catch (error) {\n                    console.error(\"User denied account access or there was an error:\", error);\n                    setError(\"Failed to connect to your wallet. Please try again.\");\n                }\n            } else if (window.web3) {\n                // Legacy dapp browsers\n                web3Instance = new Web3(window.web3.currentProvider);\n                \n                // Get accounts\n                const accounts = await web3Instance.eth.getAccounts();\n                setAccount(accounts[0]);\n                \n                // Get network ID\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                \n                setWeb3(web3Instance);\n                \n                // Initialize contracts\n                await initializeContracts(web3Instance, networkId);\n                \n            } else {\n                console.error(\"No Ethereum browser extension detected\");\n                setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing web3:\", error);\n            setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    // Initialize contracts\n    const initializeContracts = async (web3Instance, networkId) => {\n        try {\n            console.log(\"Initializing contracts for network ID:\", networkId);\n\n            // Use the contract addresses from the constant\n            const marginTradingAddress = CONTRACT_ADDRESSES.marginTrading;\n            const mockTokenAddress = CONTRACT_ADDRESSES.mockToken;\n            const liquidationEngineAddress = CONTRACT_ADDRESSES.liquidationEngine;\n\n            console.log(\"Using contract addresses:\", {\n                marginTradingAddress,\n                mockTokenAddress,\n                liquidationEngineAddress\n            });\n\n            // Initialize contract instances\n            const marginTradingContract = new web3Instance.eth.Contract(\n                MarginTradeManagerABI,\n                marginTradingAddress\n            );\n\n            const mockTokenContract = new web3Instance.eth.Contract(\n                MockTokenABI,\n                mockTokenAddress\n            );\n\n            const liquidationEngineContract = new web3Instance.eth.Contract(\n                LiquidationEngineABI,\n                liquidationEngineAddress\n            );\n\n            // Set the contracts in state\n            setContracts({\n                marginTrading: marginTradingContract,\n                mockToken: mockTokenContract,\n                liquidationEngine: liquidationEngineContract\n            });\n\n            console.log(\"Contracts initialized successfully\");\n            return true;\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            return false;\n        }\n    };\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n        }\n    };\n\n    // Fetch ETH price (simulated for now)\n    const fetchEthPrice = async () => {\n        try {\n            // In a real application, you would fetch this from an API or oracle\n            // For now, we'll use a simulated price\n            const simulatedPrice = Math.floor(1800 + Math.random() * 200).toString();\n            setEthPrice(simulatedPrice);\n        } catch (error) {\n            console.error(\"Error fetching ETH price:\", error);\n        }\n    };\n\n    // Fetch ETH price on component mount and when account changes\n    useEffect(() => {\n        if (web3 && account) {\n            fetchEthPrice();\n        }\n    }, [web3, account]);\n\n    // Initialize web3 and contracts when the component mounts\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                } else {\n                    setAccount(null);\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                window.location.reload();\n            });\n        }\n        \n        initializeWeb3();\n    }, [initializeWeb3]);\n\n    // Set up interval to refresh ETH price\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (web3 && account) {\n                fetchEthPrice();\n            }\n        }, 30000); // Every 30 seconds\n        \n        return () => clearInterval(interval);\n    }, [web3, account]);\n\n    // Context value\n    const contextValue = {\n        web3,\n        account,\n        networkId,\n        contracts,\n        loading,\n        error,\n        ethPrice,\n        connectWallet\n    };\n\n    return (\n        <Web3Context.Provider value={contextValue}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}