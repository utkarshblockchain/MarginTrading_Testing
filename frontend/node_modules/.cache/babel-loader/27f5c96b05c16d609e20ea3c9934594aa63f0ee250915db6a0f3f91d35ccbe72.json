{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../contracts/MarginTrading.json';\nimport MockToken from '../contracts/MockToken.json';\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [ethPrice, setEthPrice] = useState(0);\n\n  // Hardcoded contract addresses for different networks\n  const contractAddresses = {\n    // Sepolia testnet\n    11155111: {\n      marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      // Replace with actual deployed address\n      mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      // Replace with actual deployed address\n      mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\" // Replace with actual deployed address\n    },\n    // Local development\n    1337: {\n      marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\"\n    },\n    31337: {\n      marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\"\n    }\n  };\n\n  // Function to initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      // Check network ID\n      if (!networkId) {\n        networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n      }\n      console.log(\"Current network ID:\", networkId);\n\n      // Get contract addresses for the current network\n      let marginTradingAddress, mockTokenAddress, mockPriceFeedAddress;\n\n      // First try to get from networks in JSON\n      if (MarginTrading.networks && MarginTrading.networks[networkId]) {\n        var _MockToken$networks$n, _MockPriceFeed$networ;\n        marginTradingAddress = MarginTrading.networks[networkId].address;\n        mockTokenAddress = (_MockToken$networks$n = MockToken.networks[networkId]) === null || _MockToken$networks$n === void 0 ? void 0 : _MockToken$networks$n.address;\n        mockPriceFeedAddress = (_MockPriceFeed$networ = MockPriceFeed.networks[networkId]) === null || _MockPriceFeed$networ === void 0 ? void 0 : _MockPriceFeed$networ.address;\n      }\n\n      // If not found, try hardcoded addresses\n      if (!marginTradingAddress && contractAddresses[networkId]) {\n        marginTradingAddress = contractAddresses[networkId].marginTrading;\n        mockTokenAddress = contractAddresses[networkId].mockToken;\n        mockPriceFeedAddress = contractAddresses[networkId].mockPriceFeed;\n      }\n      console.log(\"Using contract addresses:\", {\n        marginTrading: marginTradingAddress,\n        mockToken: mockTokenAddress,\n        mockPriceFeed: mockPriceFeedAddress\n      });\n      if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\n        throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\n      }\n      const marginTradingContract = new web3Instance.eth.Contract(MarginTrading.abi, marginTradingAddress);\n      const mockTokenContract = new web3Instance.eth.Contract(MockToken.abi, mockTokenAddress);\n      const mockPriceFeedContract = new web3Instance.eth.Contract(MockPriceFeed.abi, mockPriceFeedAddress);\n\n      // Set global web3 instance for convenience\n      window.web3 = web3Instance;\n\n      // Fetch initial ETH price\n      try {\n        const price = await mockPriceFeedContract.methods.getLatestPrice().call();\n        setEthPrice(web3Instance.utils.fromWei(price, 'ether'));\n      } catch (err) {\n        console.warn(\"Could not fetch ETH price:\", err);\n        setEthPrice(\"1500.00\"); // Fallback price\n      }\n      return {\n        marginTrading: marginTradingContract,\n        mockToken: mockTokenContract,\n        mockPriceFeed: mockPriceFeedContract\n      };\n    } catch (error) {\n      console.error(\"Contract initialization error:\", error);\n      setError(`Contract initialization failed: ${error.message}`);\n      return null;\n    }\n  };\n\n  // Function to connect wallet (to be called by button)\n  const connectWallet = async () => {\n    try {\n      setError(null);\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n      }\n      setAccount(accounts[0]);\n\n      // Initialize Web3 if not already initialized\n      if (!web3) {\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n        window.web3 = web3Instance; // Set global web3 instance\n\n        // Initialize contracts\n        const networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n        const contractInstances = await initializeContracts(web3Instance, networkId);\n        setContracts(contractInstances);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Wallet connection error:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n          window.web3 = web3Instance; // Set global web3 instance\n\n          // Check if already connected\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n\n            // Initialize contracts\n            const networkId = await web3Instance.eth.net.getId();\n            setNetworkId(networkId);\n            const contractInstances = await initializeContracts(web3Instance, networkId);\n            setContracts(contractInstances);\n          }\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', newAccounts => {\n            if (newAccounts.length === 0) {\n              // User disconnected their wallet\n              setAccount(null);\n            } else {\n              setAccount(newAccounts[0]);\n            }\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        }\n      } catch (error) {\n        console.error(\"Initialization error:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    init();\n  }, []);\n\n  // Function to refresh position data\n  const refreshData = async () => {\n    if (contracts !== null && contracts !== void 0 && contracts.mockPriceFeed) {\n      try {\n        const price = await contracts.mockPriceFeed.methods.getLatestPrice().call();\n        setEthPrice(web3.utils.fromWei(price, 'ether'));\n      } catch (err) {\n        console.warn(\"Could not refresh ETH price:\", err);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      contracts,\n      account,\n      loading,\n      error,\n      networkId,\n      ethPrice,\n      connectWallet,\n      refreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"Rz4RLfaWqSUXsNY5fbWiIWA1yCs=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","Web3","MarginTrading","MockToken","MockPriceFeed","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","web3","setWeb3","contracts","setContracts","account","setAccount","loading","setLoading","error","setError","networkId","setNetworkId","ethPrice","setEthPrice","contractAddresses","marginTrading","mockToken","mockPriceFeed","initializeContracts","web3Instance","eth","net","getId","console","log","marginTradingAddress","mockTokenAddress","mockPriceFeedAddress","networks","_MockToken$networks$n","_MockPriceFeed$networ","address","marginTradingContract","Contract","abi","mockTokenContract","mockPriceFeedContract","window","price","methods","getLatestPrice","call","utils","fromWei","err","warn","message","connectWallet","ethereum","accounts","request","method","length","contractInstances","init","getAccounts","on","newAccounts","location","reload","refreshData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../contracts/MarginTrading.json';\nimport MockToken from '../contracts/MockToken.json';\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\n\nexport const Web3Context = createContext();\n\nexport const useWeb3 = () => {\n    const context = useContext(Web3Context);\n    if (!context) {\n        throw new Error('useWeb3 must be used within a Web3Provider');\n    }\n    return context;\n};\n\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contracts, setContracts] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [ethPrice, setEthPrice] = useState(0);\n\n    // Hardcoded contract addresses for different networks\n    const contractAddresses = {\n        // Sepolia testnet\n        11155111: {\n            marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\", // Replace with actual deployed address\n            mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", // Replace with actual deployed address\n            mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\" // Replace with actual deployed address\n        },\n        // Local development\n        1337: {\n            marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n            mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n            mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\"\n        },\n        31337: {\n            marginTrading: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n            mockToken: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n            mockPriceFeed: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\"\n        }\n    };\n\n    // Function to initialize contracts\n    const initializeContracts = async (web3Instance, networkId) => {\n        try {\n            // Check network ID\n            if (!networkId) {\n                networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n            }\n\n            console.log(\"Current network ID:\", networkId);\n\n            // Get contract addresses for the current network\n            let marginTradingAddress, mockTokenAddress, mockPriceFeedAddress;\n            \n            // First try to get from networks in JSON\n            if (MarginTrading.networks && MarginTrading.networks[networkId]) {\n                marginTradingAddress = MarginTrading.networks[networkId].address;\n                mockTokenAddress = MockToken.networks[networkId]?.address;\n                mockPriceFeedAddress = MockPriceFeed.networks[networkId]?.address;\n            }\n            \n            // If not found, try hardcoded addresses\n            if (!marginTradingAddress && contractAddresses[networkId]) {\n                marginTradingAddress = contractAddresses[networkId].marginTrading;\n                mockTokenAddress = contractAddresses[networkId].mockToken;\n                mockPriceFeedAddress = contractAddresses[networkId].mockPriceFeed;\n            }\n\n            console.log(\"Using contract addresses:\", {\n                marginTrading: marginTradingAddress,\n                mockToken: mockTokenAddress,\n                mockPriceFeed: mockPriceFeedAddress\n            });\n\n            if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\n                throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\n            }\n\n            const marginTradingContract = new web3Instance.eth.Contract(\n                MarginTrading.abi,\n                marginTradingAddress\n            );\n\n            const mockTokenContract = new web3Instance.eth.Contract(\n                MockToken.abi,\n                mockTokenAddress\n            );\n\n            const mockPriceFeedContract = new web3Instance.eth.Contract(\n                MockPriceFeed.abi,\n                mockPriceFeedAddress\n            );\n\n            // Set global web3 instance for convenience\n            window.web3 = web3Instance;\n\n            // Fetch initial ETH price\n            try {\n                const price = await mockPriceFeedContract.methods.getLatestPrice().call();\n                setEthPrice(web3Instance.utils.fromWei(price, 'ether'));\n            } catch (err) {\n                console.warn(\"Could not fetch ETH price:\", err);\n                setEthPrice(\"1500.00\"); // Fallback price\n            }\n\n            return {\n                marginTrading: marginTradingContract,\n                mockToken: mockTokenContract,\n                mockPriceFeed: mockPriceFeedContract\n            };\n        } catch (error) {\n            console.error(\"Contract initialization error:\", error);\n            setError(`Contract initialization failed: ${error.message}`);\n            return null;\n        }\n    };\n\n    // Function to connect wallet (to be called by button)\n    const connectWallet = async () => {\n        try {\n            setError(null);\n\n            if (!window.ethereum) {\n                throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n            }\n\n            // Request account access\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n            if (accounts.length === 0) {\n                throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n            }\n\n            setAccount(accounts[0]);\n\n            // Initialize Web3 if not already initialized\n            if (!web3) {\n                const web3Instance = new Web3(window.ethereum);\n                setWeb3(web3Instance);\n                window.web3 = web3Instance; // Set global web3 instance\n\n                // Initialize contracts\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                const contractInstances = await initializeContracts(web3Instance, networkId);\n                setContracts(contractInstances);\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"Wallet connection error:\", error);\n            setError(error.message);\n            return false;\n        }\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                // Check if MetaMask is installed\n                if (window.ethereum) {\n                    const web3Instance = new Web3(window.ethereum);\n                    setWeb3(web3Instance);\n                    window.web3 = web3Instance; // Set global web3 instance\n\n                    // Check if already connected\n                    const accounts = await web3Instance.eth.getAccounts();\n                    if (accounts.length > 0) {\n                        setAccount(accounts[0]);\n\n                        // Initialize contracts\n                        const networkId = await web3Instance.eth.net.getId();\n                        setNetworkId(networkId);\n                        const contractInstances = await initializeContracts(web3Instance, networkId);\n                        setContracts(contractInstances);\n                    }\n\n                    // Listen for account changes\n                    window.ethereum.on('accountsChanged', (newAccounts) => {\n                        if (newAccounts.length === 0) {\n                            // User disconnected their wallet\n                            setAccount(null);\n                        } else {\n                            setAccount(newAccounts[0]);\n                        }\n                    });\n\n                    // Listen for network changes\n                    window.ethereum.on('chainChanged', () => {\n                        window.location.reload();\n                    });\n                }\n            } catch (error) {\n                console.error(\"Initialization error:\", error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        init();\n    }, []);\n\n    // Function to refresh position data\n    const refreshData = async () => {\n        if (contracts?.mockPriceFeed) {\n            try {\n                const price = await contracts.mockPriceFeed.methods.getLatestPrice().call();\n                setEthPrice(web3.utils.fromWei(price, 'ether'));\n            } catch (err) {\n                console.warn(\"Could not refresh ETH price:\", err);\n            }\n        }\n    };\n\n    return (\n        <Web3Context.Provider value={{\n            web3,\n            contracts,\n            account,\n            loading,\n            error,\n            networkId,\n            ethPrice,\n            connectWallet,\n            refreshData\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,aAAa,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMW,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGV,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACA,MAAM+B,iBAAiB,GAAG;IACtB;IACA,QAAQ,EAAE;MACNC,aAAa,EAAE,4CAA4C;MAAE;MAC7DC,SAAS,EAAE,4CAA4C;MAAE;MACzDC,aAAa,EAAE,4CAA4C,CAAC;IAChE,CAAC;IACD;IACA,IAAI,EAAE;MACFF,aAAa,EAAE,4CAA4C;MAC3DC,SAAS,EAAE,4CAA4C;MACvDC,aAAa,EAAE;IACnB,CAAC;IACD,KAAK,EAAE;MACHF,aAAa,EAAE,4CAA4C;MAC3DC,SAAS,EAAE,4CAA4C;MACvDC,aAAa,EAAE;IACnB;EACJ,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,YAAY,EAAET,SAAS,KAAK;IAC3D,IAAI;MACA;MACA,IAAI,CAACA,SAAS,EAAE;QACZA,SAAS,GAAG,MAAMS,YAAY,CAACC,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;QAC9CX,YAAY,CAACD,SAAS,CAAC;MAC3B;MAEAa,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEd,SAAS,CAAC;;MAE7C;MACA,IAAIe,oBAAoB,EAAEC,gBAAgB,EAAEC,oBAAoB;;MAEhE;MACA,IAAIxC,aAAa,CAACyC,QAAQ,IAAIzC,aAAa,CAACyC,QAAQ,CAAClB,SAAS,CAAC,EAAE;QAAA,IAAAmB,qBAAA,EAAAC,qBAAA;QAC7DL,oBAAoB,GAAGtC,aAAa,CAACyC,QAAQ,CAAClB,SAAS,CAAC,CAACqB,OAAO;QAChEL,gBAAgB,IAAAG,qBAAA,GAAGzC,SAAS,CAACwC,QAAQ,CAAClB,SAAS,CAAC,cAAAmB,qBAAA,uBAA7BA,qBAAA,CAA+BE,OAAO;QACzDJ,oBAAoB,IAAAG,qBAAA,GAAGzC,aAAa,CAACuC,QAAQ,CAAClB,SAAS,CAAC,cAAAoB,qBAAA,uBAAjCA,qBAAA,CAAmCC,OAAO;MACrE;;MAEA;MACA,IAAI,CAACN,oBAAoB,IAAIX,iBAAiB,CAACJ,SAAS,CAAC,EAAE;QACvDe,oBAAoB,GAAGX,iBAAiB,CAACJ,SAAS,CAAC,CAACK,aAAa;QACjEW,gBAAgB,GAAGZ,iBAAiB,CAACJ,SAAS,CAAC,CAACM,SAAS;QACzDW,oBAAoB,GAAGb,iBAAiB,CAACJ,SAAS,CAAC,CAACO,aAAa;MACrE;MAEAM,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;QACrCT,aAAa,EAAEU,oBAAoB;QACnCT,SAAS,EAAEU,gBAAgB;QAC3BT,aAAa,EAAEU;MACnB,CAAC,CAAC;MAEF,IAAI,CAACF,oBAAoB,IAAI,CAACC,gBAAgB,IAAI,CAACC,oBAAoB,EAAE;QACrE,MAAM,IAAI/B,KAAK,CAAC,8CAA8Cc,SAAS,EAAE,CAAC;MAC9E;MAEA,MAAMsB,qBAAqB,GAAG,IAAIb,YAAY,CAACC,GAAG,CAACa,QAAQ,CACvD9C,aAAa,CAAC+C,GAAG,EACjBT,oBACJ,CAAC;MAED,MAAMU,iBAAiB,GAAG,IAAIhB,YAAY,CAACC,GAAG,CAACa,QAAQ,CACnD7C,SAAS,CAAC8C,GAAG,EACbR,gBACJ,CAAC;MAED,MAAMU,qBAAqB,GAAG,IAAIjB,YAAY,CAACC,GAAG,CAACa,QAAQ,CACvD5C,aAAa,CAAC6C,GAAG,EACjBP,oBACJ,CAAC;;MAED;MACAU,MAAM,CAACrC,IAAI,GAAGmB,YAAY;;MAE1B;MACA,IAAI;QACA,MAAMmB,KAAK,GAAG,MAAMF,qBAAqB,CAACG,OAAO,CAACC,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;QACzE5B,WAAW,CAACM,YAAY,CAACuB,KAAK,CAACC,OAAO,CAACL,KAAK,EAAE,OAAO,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOM,GAAG,EAAE;QACVrB,OAAO,CAACsB,IAAI,CAAC,4BAA4B,EAAED,GAAG,CAAC;QAC/C/B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;MAC5B;MAEA,OAAO;QACHE,aAAa,EAAEiB,qBAAqB;QACpChB,SAAS,EAAEmB,iBAAiB;QAC5BlB,aAAa,EAAEmB;MACnB,CAAC;IACL,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACZe,OAAO,CAACf,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,QAAQ,CAAC,mCAAmCD,KAAK,CAACsC,OAAO,EAAE,CAAC;MAC5D,OAAO,IAAI;IACf;EACJ,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACAtC,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI,CAAC4B,MAAM,CAACW,QAAQ,EAAE;QAClB,MAAM,IAAIpD,KAAK,CAAC,6EAA6E,CAAC;MAClG;;MAEA;MACA,MAAMqD,QAAQ,GAAG,MAAMZ,MAAM,CAACW,QAAQ,CAACE,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAEjF,IAAIF,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,IAAIxD,KAAK,CAAC,0DAA0D,CAAC;MAC/E;MAEAS,UAAU,CAAC4C,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEvB;MACA,IAAI,CAACjD,IAAI,EAAE;QACP,MAAMmB,YAAY,GAAG,IAAIjC,IAAI,CAACmD,MAAM,CAACW,QAAQ,CAAC;QAC9C/C,OAAO,CAACkB,YAAY,CAAC;QACrBkB,MAAM,CAACrC,IAAI,GAAGmB,YAAY,CAAC,CAAC;;QAE5B;QACA,MAAMT,SAAS,GAAG,MAAMS,YAAY,CAACC,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;QACpDX,YAAY,CAACD,SAAS,CAAC;QACvB,MAAM2C,iBAAiB,GAAG,MAAMnC,mBAAmB,CAACC,YAAY,EAAET,SAAS,CAAC;QAC5EP,YAAY,CAACkD,iBAAiB,CAAC;MACnC;MAEA,OAAO,IAAI;IACf,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACZe,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAACD,KAAK,CAACsC,OAAO,CAAC;MACvB,OAAO,KAAK;IAChB;EACJ,CAAC;EAED9D,SAAS,CAAC,MAAM;IACZ,MAAMsE,IAAI,GAAG,MAAAA,CAAA,KAAY;MACrB,IAAI;QACA;QACA,IAAIjB,MAAM,CAACW,QAAQ,EAAE;UACjB,MAAM7B,YAAY,GAAG,IAAIjC,IAAI,CAACmD,MAAM,CAACW,QAAQ,CAAC;UAC9C/C,OAAO,CAACkB,YAAY,CAAC;UACrBkB,MAAM,CAACrC,IAAI,GAAGmB,YAAY,CAAC,CAAC;;UAE5B;UACA,MAAM8B,QAAQ,GAAG,MAAM9B,YAAY,CAACC,GAAG,CAACmC,WAAW,CAAC,CAAC;UACrD,IAAIN,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;YACrB/C,UAAU,CAAC4C,QAAQ,CAAC,CAAC,CAAC,CAAC;;YAEvB;YACA,MAAMvC,SAAS,GAAG,MAAMS,YAAY,CAACC,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;YACpDX,YAAY,CAACD,SAAS,CAAC;YACvB,MAAM2C,iBAAiB,GAAG,MAAMnC,mBAAmB,CAACC,YAAY,EAAET,SAAS,CAAC;YAC5EP,YAAY,CAACkD,iBAAiB,CAAC;UACnC;;UAEA;UACAhB,MAAM,CAACW,QAAQ,CAACQ,EAAE,CAAC,iBAAiB,EAAGC,WAAW,IAAK;YACnD,IAAIA,WAAW,CAACL,MAAM,KAAK,CAAC,EAAE;cAC1B;cACA/C,UAAU,CAAC,IAAI,CAAC;YACpB,CAAC,MAAM;cACHA,UAAU,CAACoD,WAAW,CAAC,CAAC,CAAC,CAAC;YAC9B;UACJ,CAAC,CAAC;;UAEF;UACApB,MAAM,CAACW,QAAQ,CAACQ,EAAE,CAAC,cAAc,EAAE,MAAM;YACrCnB,MAAM,CAACqB,QAAQ,CAACC,MAAM,CAAC,CAAC;UAC5B,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,OAAOnD,KAAK,EAAE;QACZe,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CC,QAAQ,CAACD,KAAK,CAACsC,OAAO,CAAC;MAC3B,CAAC,SAAS;QACNvC,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED+C,IAAI,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI1D,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEe,aAAa,EAAE;MAC1B,IAAI;QACA,MAAMqB,KAAK,GAAG,MAAMpC,SAAS,CAACe,aAAa,CAACsB,OAAO,CAACC,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;QAC3E5B,WAAW,CAACb,IAAI,CAAC0C,KAAK,CAACC,OAAO,CAACL,KAAK,EAAE,OAAO,CAAC,CAAC;MACnD,CAAC,CAAC,OAAOM,GAAG,EAAE;QACVrB,OAAO,CAACsB,IAAI,CAAC,8BAA8B,EAAED,GAAG,CAAC;MACrD;IACJ;EACJ,CAAC;EAED,oBACIrD,OAAA,CAACC,WAAW,CAACqE,QAAQ;IAACC,KAAK,EAAE;MACzB9D,IAAI;MACJE,SAAS;MACTE,OAAO;MACPE,OAAO;MACPE,KAAK;MACLE,SAAS;MACTE,QAAQ;MACRmC,aAAa;MACba;IACJ,CAAE;IAAA9D,QAAA,EACGA;EAAQ;IAAAiE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACnE,GAAA,CA5NWF,YAAY;AAAAsE,EAAA,GAAZtE,YAAY;AAAA,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}