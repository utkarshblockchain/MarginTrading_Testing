{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../contracts/MarginTrading.json';\nimport MockToken from '../contracts/MockToken.json';\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [ethPrice, setEthPrice] = useState(0);\n\n  // Function to initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      // Check network ID\n      if (!networkId) {\n        networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n      }\n\n      // For development, we'll use hardcoded addresses if network is localhost\n      let marginTradingAddress, mockTokenAddress, mockPriceFeedAddress;\n      if (networkId === 1337 || networkId === 31337) {\n        var _MarginTrading$networ, _MockToken$networks$n, _MockPriceFeed$networ;\n        // Local development network\n        marginTradingAddress = ((_MarginTrading$networ = MarginTrading.networks[networkId]) === null || _MarginTrading$networ === void 0 ? void 0 : _MarginTrading$networ.address) || \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n        mockTokenAddress = ((_MockToken$networks$n = MockToken.networks[networkId]) === null || _MockToken$networks$n === void 0 ? void 0 : _MockToken$networks$n.address) || \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n        mockPriceFeedAddress = ((_MockPriceFeed$networ = MockPriceFeed.networks[networkId]) === null || _MockPriceFeed$networ === void 0 ? void 0 : _MockPriceFeed$networ.address) || \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\n      } else {\n        var _MarginTrading$networ2, _MockToken$networks$n2, _MockPriceFeed$networ2;\n        // Use deployed contract addresses from the JSON files\n        marginTradingAddress = (_MarginTrading$networ2 = MarginTrading.networks[networkId]) === null || _MarginTrading$networ2 === void 0 ? void 0 : _MarginTrading$networ2.address;\n        mockTokenAddress = (_MockToken$networks$n2 = MockToken.networks[networkId]) === null || _MockToken$networks$n2 === void 0 ? void 0 : _MockToken$networks$n2.address;\n        mockPriceFeedAddress = (_MockPriceFeed$networ2 = MockPriceFeed.networks[networkId]) === null || _MockPriceFeed$networ2 === void 0 ? void 0 : _MockPriceFeed$networ2.address;\n      }\n      if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\n        throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\n      }\n      const marginTradingContract = new web3Instance.eth.Contract(MarginTrading.abi, marginTradingAddress);\n      const mockTokenContract = new web3Instance.eth.Contract(MockToken.abi, mockTokenAddress);\n      const mockPriceFeedContract = new web3Instance.eth.Contract(MockPriceFeed.abi, mockPriceFeedAddress);\n\n      // Set global web3 instance for convenience\n      window.web3 = web3Instance;\n\n      // Fetch initial ETH price\n      try {\n        const price = await mockPriceFeedContract.methods.getLatestPrice().call();\n        setEthPrice(web3Instance.utils.fromWei(price, 'ether'));\n      } catch (err) {\n        console.warn(\"Could not fetch ETH price:\", err);\n        setEthPrice(\"1500.00\"); // Fallback price\n      }\n      return {\n        marginTrading: marginTradingContract,\n        mockToken: mockTokenContract,\n        mockPriceFeed: mockPriceFeedContract\n      };\n    } catch (error) {\n      console.error(\"Contract initialization error:\", error);\n      setError(`Contract initialization failed: ${error.message}`);\n      return null;\n    }\n  };\n\n  // Function to connect wallet (to be called by button)\n  const connectWallet = async () => {\n    try {\n      setError(null);\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n      }\n      setAccount(accounts[0]);\n\n      // Initialize Web3 if not already initialized\n      if (!web3) {\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n        window.web3 = web3Instance; // Set global web3 instance\n\n        // Initialize contracts\n        const networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n        const contractInstances = await initializeContracts(web3Instance, networkId);\n        setContracts(contractInstances);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Wallet connection error:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n          window.web3 = web3Instance; // Set global web3 instance\n\n          // Check if already connected\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n\n            // Initialize contracts\n            const networkId = await web3Instance.eth.net.getId();\n            setNetworkId(networkId);\n            const contractInstances = await initializeContracts(web3Instance, networkId);\n            setContracts(contractInstances);\n          }\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', newAccounts => {\n            if (newAccounts.length === 0) {\n              // User disconnected their wallet\n              setAccount(null);\n            } else {\n              setAccount(newAccounts[0]);\n            }\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        }\n      } catch (error) {\n        console.error(\"Initialization error:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    init();\n  }, []);\n\n  // Function to refresh position data\n  const refreshData = async () => {\n    if (contracts !== null && contracts !== void 0 && contracts.mockPriceFeed) {\n      try {\n        const price = await contracts.mockPriceFeed.methods.getLatestPrice().call();\n        setEthPrice(web3.utils.fromWei(price, 'ether'));\n      } catch (err) {\n        console.warn(\"Could not refresh ETH price:\", err);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      contracts,\n      account,\n      loading,\n      error,\n      networkId,\n      ethPrice,\n      connectWallet,\n      refreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"Rz4RLfaWqSUXsNY5fbWiIWA1yCs=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","Web3","MarginTrading","MockToken","MockPriceFeed","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","web3","setWeb3","contracts","setContracts","account","setAccount","loading","setLoading","error","setError","networkId","setNetworkId","ethPrice","setEthPrice","initializeContracts","web3Instance","eth","net","getId","marginTradingAddress","mockTokenAddress","mockPriceFeedAddress","_MarginTrading$networ","_MockToken$networks$n","_MockPriceFeed$networ","networks","address","_MarginTrading$networ2","_MockToken$networks$n2","_MockPriceFeed$networ2","marginTradingContract","Contract","abi","mockTokenContract","mockPriceFeedContract","window","price","methods","getLatestPrice","call","utils","fromWei","err","console","warn","marginTrading","mockToken","mockPriceFeed","message","connectWallet","ethereum","accounts","request","method","length","contractInstances","init","getAccounts","on","newAccounts","location","reload","refreshData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../contracts/MarginTrading.json';\nimport MockToken from '../contracts/MockToken.json';\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\n\nexport const Web3Context = createContext();\n\nexport const useWeb3 = () => {\n    const context = useContext(Web3Context);\n    if (!context) {\n        throw new Error('useWeb3 must be used within a Web3Provider');\n    }\n    return context;\n};\n\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contracts, setContracts] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [ethPrice, setEthPrice] = useState(0);\n\n    // Function to initialize contracts\n    const initializeContracts = async (web3Instance, networkId) => {\n        try {\n            // Check network ID\n            if (!networkId) {\n                networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n            }\n\n            // For development, we'll use hardcoded addresses if network is localhost\n            let marginTradingAddress, mockTokenAddress, mockPriceFeedAddress;\n            \n            if (networkId === 1337 || networkId === 31337) {\n                // Local development network\n                marginTradingAddress = MarginTrading.networks[networkId]?.address || \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n                mockTokenAddress = MockToken.networks[networkId]?.address || \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n                mockPriceFeedAddress = MockPriceFeed.networks[networkId]?.address || \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\n            } else {\n                // Use deployed contract addresses from the JSON files\n                marginTradingAddress = MarginTrading.networks[networkId]?.address;\n                mockTokenAddress = MockToken.networks[networkId]?.address;\n                mockPriceFeedAddress = MockPriceFeed.networks[networkId]?.address;\n            }\n\n            if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\n                throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\n            }\n\n            const marginTradingContract = new web3Instance.eth.Contract(\n                MarginTrading.abi,\n                marginTradingAddress\n            );\n\n            const mockTokenContract = new web3Instance.eth.Contract(\n                MockToken.abi,\n                mockTokenAddress\n            );\n\n            const mockPriceFeedContract = new web3Instance.eth.Contract(\n                MockPriceFeed.abi,\n                mockPriceFeedAddress\n            );\n\n            // Set global web3 instance for convenience\n            window.web3 = web3Instance;\n\n            // Fetch initial ETH price\n            try {\n                const price = await mockPriceFeedContract.methods.getLatestPrice().call();\n                setEthPrice(web3Instance.utils.fromWei(price, 'ether'));\n            } catch (err) {\n                console.warn(\"Could not fetch ETH price:\", err);\n                setEthPrice(\"1500.00\"); // Fallback price\n            }\n\n            return {\n                marginTrading: marginTradingContract,\n                mockToken: mockTokenContract,\n                mockPriceFeed: mockPriceFeedContract\n            };\n        } catch (error) {\n            console.error(\"Contract initialization error:\", error);\n            setError(`Contract initialization failed: ${error.message}`);\n            return null;\n        }\n    };\n\n    // Function to connect wallet (to be called by button)\n    const connectWallet = async () => {\n        try {\n            setError(null);\n\n            if (!window.ethereum) {\n                throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n            }\n\n            // Request account access\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n            if (accounts.length === 0) {\n                throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n            }\n\n            setAccount(accounts[0]);\n\n            // Initialize Web3 if not already initialized\n            if (!web3) {\n                const web3Instance = new Web3(window.ethereum);\n                setWeb3(web3Instance);\n                window.web3 = web3Instance; // Set global web3 instance\n\n                // Initialize contracts\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                const contractInstances = await initializeContracts(web3Instance, networkId);\n                setContracts(contractInstances);\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"Wallet connection error:\", error);\n            setError(error.message);\n            return false;\n        }\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                // Check if MetaMask is installed\n                if (window.ethereum) {\n                    const web3Instance = new Web3(window.ethereum);\n                    setWeb3(web3Instance);\n                    window.web3 = web3Instance; // Set global web3 instance\n\n                    // Check if already connected\n                    const accounts = await web3Instance.eth.getAccounts();\n                    if (accounts.length > 0) {\n                        setAccount(accounts[0]);\n\n                        // Initialize contracts\n                        const networkId = await web3Instance.eth.net.getId();\n                        setNetworkId(networkId);\n                        const contractInstances = await initializeContracts(web3Instance, networkId);\n                        setContracts(contractInstances);\n                    }\n\n                    // Listen for account changes\n                    window.ethereum.on('accountsChanged', (newAccounts) => {\n                        if (newAccounts.length === 0) {\n                            // User disconnected their wallet\n                            setAccount(null);\n                        } else {\n                            setAccount(newAccounts[0]);\n                        }\n                    });\n\n                    // Listen for network changes\n                    window.ethereum.on('chainChanged', () => {\n                        window.location.reload();\n                    });\n                }\n            } catch (error) {\n                console.error(\"Initialization error:\", error);\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        init();\n    }, []);\n\n    // Function to refresh position data\n    const refreshData = async () => {\n        if (contracts?.mockPriceFeed) {\n            try {\n                const price = await contracts.mockPriceFeed.methods.getLatestPrice().call();\n                setEthPrice(web3.utils.fromWei(price, 'ether'));\n            } catch (err) {\n                console.warn(\"Could not refresh ETH price:\", err);\n            }\n        }\n    };\n\n    return (\n        <Web3Context.Provider value={{\n            web3,\n            contracts,\n            account,\n            loading,\n            error,\n            networkId,\n            ethPrice,\n            connectWallet,\n            refreshData\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}