{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\components\\\\DepositCollateral.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositCollateral.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DepositCollateral = () => {\n  _s();\n  const {\n    web3,\n    contracts,\n    account,\n    forceInitialize\n  } = useWeb3();\n  const [amount, setAmount] = useState('');\n  const [collateralType, setCollateralType] = useState('eth');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [approvalLoading, setApprovalLoading] = useState(false);\n  const [userMargin, setUserMargin] = useState('0');\n  const [userTokenMargin, setUserTokenMargin] = useState('0');\n  const [tokenBalance, setTokenBalance] = useState('0');\n  const [allowance, setAllowance] = useState('0');\n  const [initializingContracts, setInitializingContracts] = useState(false);\n\n  // Fetch user's margin balances\n  useEffect(() => {\n    const fetchMarginBalances = async () => {\n      if (!web3 || !contracts || !account) {\n        console.log(\"Web3, contracts, or account not initialized\");\n        return;\n      }\n      if (!contracts.marginTrading || !contracts.mockToken) {\n        console.log(\"Contract instances not initialized\", contracts);\n        return;\n      }\n      try {\n        // Try to get ETH margin\n        try {\n          // First try with userMargin function\n          const ethMargin = await contracts.marginTrading.methods.userMargin(account).call();\n          setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n          console.log(\"ETH margin fetched:\", web3.utils.fromWei(ethMargin, 'ether'));\n        } catch (ethError) {\n          console.error(\"Error fetching ETH margin with userMargin:\", ethError);\n\n          // Fallback to checking the contract's balance\n          try {\n            const balance = await web3.eth.getBalance(account);\n            setUserMargin(web3.utils.fromWei(balance, 'ether'));\n            console.log(\"Using account ETH balance instead:\", web3.utils.fromWei(balance, 'ether'));\n          } catch (balanceError) {\n            console.error(\"Error fetching account balance:\", balanceError);\n          }\n        }\n\n        // Try to get token margin\n        try {\n          // First try with userTokenMargin function\n          const tokenMargin = await contracts.marginTrading.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n          setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n          console.log(\"Token margin fetched:\", web3.utils.fromWei(tokenMargin, 'ether'));\n        } catch (tokenError) {\n          console.error(\"Error fetching token margin with userTokenMargin:\", tokenError);\n          setUserTokenMargin('0');\n        }\n\n        // Fetch token balance\n        try {\n          const balance = await contracts.mockToken.methods.balanceOf(account).call();\n          setTokenBalance(web3.utils.fromWei(balance, 'ether'));\n          console.log(\"Token balance fetched:\", web3.utils.fromWei(balance, 'ether'));\n        } catch (balanceError) {\n          console.error(\"Error fetching token balance:\", balanceError);\n        }\n\n        // Fetch current allowance\n        try {\n          const currentAllowance = await contracts.mockToken.methods.allowance(account, contracts.marginTrading.options.address).call();\n          setAllowance(web3.utils.fromWei(currentAllowance, 'ether'));\n          console.log(\"Token allowance fetched:\", web3.utils.fromWei(currentAllowance, 'ether'));\n        } catch (allowanceError) {\n          console.error(\"Error fetching token allowance:\", allowanceError);\n        }\n      } catch (error) {\n        console.error(\"Error in fetchMarginBalances:\", error);\n        setError(\"Error fetching balances. Check console for details.\");\n      }\n    };\n    if (web3 && contracts && account) {\n      fetchMarginBalances();\n\n      // Set up interval to refresh balances\n      const interval = setInterval(fetchMarginBalances, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [web3, contracts, account]);\n\n  // Function to handle token approval\n  const handleApproveToken = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account) {\n      setError(\"Web3 connection not initialized\");\n      return;\n    }\n    if (!contracts.mockToken || !contracts.marginTrading) {\n      setError(\"Contract instances not initialized\");\n      return;\n    }\n    try {\n      setApprovalLoading(true);\n      setError(null);\n      setSuccess(null);\n\n      // Use a very large approval amount to avoid needing multiple approvals\n      const maxApproval = web3.utils.toWei('1000000', 'ether');\n      console.log(\"Approving tokens for:\", contracts.marginTrading.options.address);\n      console.log(\"From account:\", account);\n      console.log(\"Amount:\", maxApproval);\n      const approvalTx = await contracts.mockToken.methods.approve(contracts.marginTrading.options.address, maxApproval).send({\n        from: account\n      });\n      console.log(\"Token approval transaction:\", approvalTx);\n\n      // Fetch updated allowance\n      const newAllowance = await contracts.mockToken.methods.allowance(account, contracts.marginTrading.options.address).call();\n      setAllowance(web3.utils.fromWei(newAllowance, 'ether'));\n      setSuccess(`Successfully approved tokens for deposit`);\n    } catch (error) {\n      console.error(\"Error approving tokens:\", error);\n      setError(error.message || \"Failed to approve tokens. Please try again.\");\n    } finally {\n      setApprovalLoading(false);\n    }\n  };\n  const handleDeposit = async e => {\n    e.preventDefault();\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account) {\n      setError(\"Web3 connection not initialized\");\n      return;\n    }\n    if (!contracts.marginTrading || collateralType === 'token' && !contracts.mockToken) {\n      setError(\"Contract instances not initialized\");\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(null);\n      if (collateralType === 'eth') {\n        // Deposit ETH\n        const amountWei = web3.utils.toWei(amount, 'ether');\n        console.log(\"Depositing ETH:\", amountWei);\n        try {\n          // First try with depositMargin function\n          await contracts.marginTrading.methods.depositMargin().send({\n            from: account,\n            value: amountWei\n          });\n          setSuccess(`Successfully deposited ${amount} ETH as collateral`);\n        } catch (depositError) {\n          console.error(\"Error with depositMargin:\", depositError);\n          setError(\"Failed to deposit ETH. Check console for details.\");\n        }\n      } else {\n        // Deposit ERC20 token\n        const amountWei = web3.utils.toWei(amount, 'ether');\n\n        // Check token balance first\n        const balance = await contracts.mockToken.methods.balanceOf(account).call();\n        console.log(\"Token balance:\", web3.utils.fromWei(balance, 'ether'), \"tokens\");\n        if (parseFloat(web3.utils.fromWei(balance, 'ether')) < parseFloat(amount)) {\n          setError(`Insufficient token balance. You have ${web3.utils.fromWei(balance, 'ether')} tokens.`);\n          setLoading(false);\n          return;\n        }\n\n        // Check if token is already approved\n        const currentAllowance = await contracts.mockToken.methods.allowance(account, contracts.marginTrading.options.address).call();\n        console.log(\"Current allowance:\", web3.utils.fromWei(currentAllowance, 'ether'), \"tokens\");\n        if (parseFloat(web3.utils.fromWei(currentAllowance, 'ether')) < parseFloat(amount)) {\n          setError(`Insufficient token allowance. Please approve tokens first.`);\n          setLoading(false);\n          return;\n        }\n\n        // Now deposit the token\n        try {\n          console.log(\"Depositing tokens:\", amountWei);\n          await contracts.marginTrading.methods.depositMarginERC20(contracts.mockToken.options.address, amountWei).send({\n            from: account\n          });\n          setSuccess(`Successfully deposited ${amount} tokens as collateral`);\n        } catch (depositError) {\n          console.error(\"Error depositing tokens:\", depositError);\n          setError(\"Failed to deposit tokens. Please try again.\");\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Reset form\n      setAmount('');\n    } catch (error) {\n      console.error(\"Error depositing collateral:\", error);\n      setError(error.message || \"Failed to deposit collateral. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleWithdraw = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      setError('Please enter a valid amount');\n      return;\n    }\n    if (!web3 || !contracts || !account || !contracts.marginTrading) {\n      setError(\"Web3 connection or contracts not initialized\");\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(null);\n      const amountWei = web3.utils.toWei(amount, 'ether');\n      console.log(\"Withdrawing margin:\", amountWei);\n      try {\n        await contracts.marginTrading.methods.withdrawMargin(0, amountWei) // Using position ID 0 for simplicity\n        .send({\n          from: account\n        });\n        setSuccess(`Successfully withdrew ${amount} from collateral`);\n      } catch (withdrawError) {\n        console.error(\"Error with withdrawMargin:\", withdrawError);\n        setError(\"Failed to withdraw. Check console for details.\");\n      }\n\n      // Reset form\n      setAmount('');\n    } catch (error) {\n      console.error(\"Error withdrawing collateral:\", error);\n      setError(error.message || \"Failed to withdraw collateral. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle force initialization\n  const handleForceInitialize = async () => {\n    setInitializingContracts(true);\n    setError(null);\n    try {\n      const success = await forceInitialize();\n      if (success) {\n        setSuccess(\"Contracts initialized successfully!\");\n      } else {\n        setError(\"Failed to initialize contracts. Please check console for details.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Error initializing contracts: \" + error.message);\n    } finally {\n      setInitializingContracts(false);\n    }\n  };\n\n  // Check if contracts are initialized\n  const contractsInitialized = web3 && contracts && contracts.marginTrading && contracts.mockToken;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card deposit-collateral\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deposit/Withdraw Collateral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this), !contractsInitialized && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contract-initialization\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: \"Waiting for contract initialization... Please make sure you're connected to the Sepolia testnet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button initialize-button\",\n        onClick: handleForceInitialize,\n        disabled: initializingContracts,\n        children: initializingContracts ? 'Initializing...' : 'Force Initialize Contracts'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balance-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"ETH Margin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-value\",\n          children: [parseFloat(userMargin).toFixed(4), \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Token Margin:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-value\",\n          children: [parseFloat(userTokenMargin).toFixed(2), \" Tokens\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), collateralType === 'token' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Token Balance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"balance-value\",\n            children: [parseFloat(tokenBalance).toFixed(2), \" Tokens\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Token Allowance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"balance-value\",\n            children: [parseFloat(allowance).toFixed(2), \" Tokens\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDeposit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"amount\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          step: \"0.01\",\n          min: \"0.01\",\n          placeholder: \"0.1\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"collateralType\",\n          children: \"Collateral Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"collateral-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `collateral-btn ${collateralType === 'eth' ? 'active' : ''}`,\n            onClick: () => setCollateralType('eth'),\n            children: \"ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `collateral-btn ${collateralType === 'token' ? 'active' : ''}`,\n            onClick: () => setCollateralType('token'),\n            children: \"Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [collateralType === 'token' && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleApproveToken,\n          disabled: approvalLoading || !amount || !contractsInitialized,\n          className: \"action-button approve-button\",\n          children: approvalLoading ? 'Approving...' : 'Approve Tokens'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading || !amount || !contractsInitialized || collateralType === 'token' && parseFloat(allowance) < parseFloat(amount),\n          className: \"action-button deposit-button\",\n          children: loading ? 'Processing...' : 'Deposit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleWithdraw,\n          disabled: loading || !amount || !contractsInitialized,\n          className: \"action-button withdraw-button\",\n          children: loading ? 'Processing...' : 'Withdraw'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositCollateral, \"TCpq3Z2tyW1LQadTc/xksSmQzT0=\", false, function () {\n  return [useWeb3];\n});\n_c = DepositCollateral;\nexport default DepositCollateral;\nvar _c;\n$RefreshReg$(_c, \"DepositCollateral\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3","jsxDEV","_jsxDEV","Fragment","_Fragment","DepositCollateral","_s","web3","contracts","account","forceInitialize","amount","setAmount","collateralType","setCollateralType","loading","setLoading","error","setError","success","setSuccess","approvalLoading","setApprovalLoading","userMargin","setUserMargin","userTokenMargin","setUserTokenMargin","tokenBalance","setTokenBalance","allowance","setAllowance","initializingContracts","setInitializingContracts","fetchMarginBalances","console","log","marginTrading","mockToken","ethMargin","methods","call","utils","fromWei","ethError","balance","eth","getBalance","balanceError","tokenMargin","options","address","tokenError","balanceOf","currentAllowance","allowanceError","interval","setInterval","clearInterval","handleApproveToken","parseFloat","maxApproval","toWei","approvalTx","approve","send","from","newAllowance","message","handleDeposit","e","preventDefault","amountWei","depositMargin","value","depositError","depositMarginERC20","handleWithdraw","withdrawMargin","withdrawError","handleForceInitialize","contractsInitialized","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toFixed","onSubmit","htmlFor","type","id","onChange","target","step","min","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/components/DepositCollateral.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositCollateral.css';\n\nconst DepositCollateral = () => {\n    const { web3, contracts, account, forceInitialize } = useWeb3();\n    const [amount, setAmount] = useState('');\n    const [collateralType, setCollateralType] = useState('eth');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(null);\n    const [approvalLoading, setApprovalLoading] = useState(false);\n    const [userMargin, setUserMargin] = useState('0');\n    const [userTokenMargin, setUserTokenMargin] = useState('0');\n    const [tokenBalance, setTokenBalance] = useState('0');\n    const [allowance, setAllowance] = useState('0');\n    const [initializingContracts, setInitializingContracts] = useState(false);\n\n    // Fetch user's margin balances\n    useEffect(() => {\n        const fetchMarginBalances = async () => {\n            if (!web3 || !contracts || !account) {\n                console.log(\"Web3, contracts, or account not initialized\");\n                return;\n            }\n\n            if (!contracts.marginTrading || !contracts.mockToken) {\n                console.log(\"Contract instances not initialized\", contracts);\n                return;\n            }\n\n            try {\n                // Try to get ETH margin\n                try {\n                    // First try with userMargin function\n                    const ethMargin = await contracts.marginTrading.methods\n                        .userMargin(account)\n                        .call();\n                    setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n                    console.log(\"ETH margin fetched:\", web3.utils.fromWei(ethMargin, 'ether'));\n                } catch (ethError) {\n                    console.error(\"Error fetching ETH margin with userMargin:\", ethError);\n                    \n                    // Fallback to checking the contract's balance\n                    try {\n                        const balance = await web3.eth.getBalance(account);\n                        setUserMargin(web3.utils.fromWei(balance, 'ether'));\n                        console.log(\"Using account ETH balance instead:\", web3.utils.fromWei(balance, 'ether'));\n                    } catch (balanceError) {\n                        console.error(\"Error fetching account balance:\", balanceError);\n                    }\n                }\n\n                // Try to get token margin\n                try {\n                    // First try with userTokenMargin function\n                    const tokenMargin = await contracts.marginTrading.methods\n                        .userTokenMargin(account, contracts.mockToken.options.address)\n                        .call();\n                    setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n                    console.log(\"Token margin fetched:\", web3.utils.fromWei(tokenMargin, 'ether'));\n                } catch (tokenError) {\n                    console.error(\"Error fetching token margin with userTokenMargin:\", tokenError);\n                    setUserTokenMargin('0');\n                }\n\n                // Fetch token balance\n                try {\n                    const balance = await contracts.mockToken.methods\n                        .balanceOf(account)\n                        .call();\n                    setTokenBalance(web3.utils.fromWei(balance, 'ether'));\n                    console.log(\"Token balance fetched:\", web3.utils.fromWei(balance, 'ether'));\n                } catch (balanceError) {\n                    console.error(\"Error fetching token balance:\", balanceError);\n                }\n\n                // Fetch current allowance\n                try {\n                    const currentAllowance = await contracts.mockToken.methods\n                        .allowance(account, contracts.marginTrading.options.address)\n                        .call();\n                    setAllowance(web3.utils.fromWei(currentAllowance, 'ether'));\n                    console.log(\"Token allowance fetched:\", web3.utils.fromWei(currentAllowance, 'ether'));\n                } catch (allowanceError) {\n                    console.error(\"Error fetching token allowance:\", allowanceError);\n                }\n\n            } catch (error) {\n                console.error(\"Error in fetchMarginBalances:\", error);\n                setError(\"Error fetching balances. Check console for details.\");\n            }\n        };\n\n        if (web3 && contracts && account) {\n            fetchMarginBalances();\n            \n            // Set up interval to refresh balances\n            const interval = setInterval(fetchMarginBalances, 10000);\n            return () => clearInterval(interval);\n        }\n    }, [web3, contracts, account]);\n\n    // Function to handle token approval\n    const handleApproveToken = async () => {\n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account) {\n            setError(\"Web3 connection not initialized\");\n            return;\n        }\n\n        if (!contracts.mockToken || !contracts.marginTrading) {\n            setError(\"Contract instances not initialized\");\n            return;\n        }\n\n        try {\n            setApprovalLoading(true);\n            setError(null);\n            setSuccess(null);\n\n            // Use a very large approval amount to avoid needing multiple approvals\n            const maxApproval = web3.utils.toWei('1000000', 'ether');\n            \n            console.log(\"Approving tokens for:\", contracts.marginTrading.options.address);\n            console.log(\"From account:\", account);\n            console.log(\"Amount:\", maxApproval);\n\n            const approvalTx = await contracts.mockToken.methods\n                .approve(contracts.marginTrading.options.address, maxApproval)\n                .send({ from: account });\n            \n            console.log(\"Token approval transaction:\", approvalTx);\n            \n            // Fetch updated allowance\n            const newAllowance = await contracts.mockToken.methods\n                .allowance(account, contracts.marginTrading.options.address)\n                .call();\n            setAllowance(web3.utils.fromWei(newAllowance, 'ether'));\n            \n            setSuccess(`Successfully approved tokens for deposit`);\n        } catch (error) {\n            console.error(\"Error approving tokens:\", error);\n            setError(error.message || \"Failed to approve tokens. Please try again.\");\n        } finally {\n            setApprovalLoading(false);\n        }\n    };\n\n    const handleDeposit = async (e) => {\n        e.preventDefault();\n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account) {\n            setError(\"Web3 connection not initialized\");\n            return;\n        }\n\n        if (!contracts.marginTrading || (collateralType === 'token' && !contracts.mockToken)) {\n            setError(\"Contract instances not initialized\");\n            return;\n        }\n\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(null);\n\n            if (collateralType === 'eth') {\n                // Deposit ETH\n                const amountWei = web3.utils.toWei(amount, 'ether');\n                console.log(\"Depositing ETH:\", amountWei);\n                \n                try {\n                    // First try with depositMargin function\n                    await contracts.marginTrading.methods\n                        .depositMargin()\n                        .send({ from: account, value: amountWei });\n                    \n                    setSuccess(`Successfully deposited ${amount} ETH as collateral`);\n                } catch (depositError) {\n                    console.error(\"Error with depositMargin:\", depositError);\n                    setError(\"Failed to deposit ETH. Check console for details.\");\n                }\n            } else {\n                // Deposit ERC20 token\n                const amountWei = web3.utils.toWei(amount, 'ether');\n                \n                // Check token balance first\n                const balance = await contracts.mockToken.methods.balanceOf(account).call();\n                console.log(\"Token balance:\", web3.utils.fromWei(balance, 'ether'), \"tokens\");\n                \n                if (parseFloat(web3.utils.fromWei(balance, 'ether')) < parseFloat(amount)) {\n                    setError(`Insufficient token balance. You have ${web3.utils.fromWei(balance, 'ether')} tokens.`);\n                    setLoading(false);\n                    return;\n                }\n                \n                // Check if token is already approved\n                const currentAllowance = await contracts.mockToken.methods\n                    .allowance(account, contracts.marginTrading.options.address)\n                    .call();\n                console.log(\"Current allowance:\", web3.utils.fromWei(currentAllowance, 'ether'), \"tokens\");\n                \n                if (parseFloat(web3.utils.fromWei(currentAllowance, 'ether')) < parseFloat(amount)) {\n                    setError(`Insufficient token allowance. Please approve tokens first.`);\n                    setLoading(false);\n                    return;\n                }\n                \n                // Now deposit the token\n                try {\n                    console.log(\"Depositing tokens:\", amountWei);\n                    await contracts.marginTrading.methods\n                        .depositMarginERC20(contracts.mockToken.options.address, amountWei)\n                        .send({ from: account });\n                    \n                    setSuccess(`Successfully deposited ${amount} tokens as collateral`);\n                } catch (depositError) {\n                    console.error(\"Error depositing tokens:\", depositError);\n                    setError(\"Failed to deposit tokens. Please try again.\");\n                    setLoading(false);\n                    return;\n                }\n            }\n\n            // Reset form\n            setAmount('');\n        } catch (error) {\n            console.error(\"Error depositing collateral:\", error);\n            setError(error.message || \"Failed to deposit collateral. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleWithdraw = async () => {\n        if (!amount || parseFloat(amount) <= 0) {\n            setError('Please enter a valid amount');\n            return;\n        }\n\n        if (!web3 || !contracts || !account || !contracts.marginTrading) {\n            setError(\"Web3 connection or contracts not initialized\");\n            return;\n        }\n\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(null);\n\n            const amountWei = web3.utils.toWei(amount, 'ether');\n            console.log(\"Withdrawing margin:\", amountWei);\n            \n            try {\n                await contracts.marginTrading.methods\n                    .withdrawMargin(0, amountWei) // Using position ID 0 for simplicity\n                    .send({ from: account });\n                \n                setSuccess(`Successfully withdrew ${amount} from collateral`);\n            } catch (withdrawError) {\n                console.error(\"Error with withdrawMargin:\", withdrawError);\n                setError(\"Failed to withdraw. Check console for details.\");\n            }\n            \n            // Reset form\n            setAmount('');\n        } catch (error) {\n            console.error(\"Error withdrawing collateral:\", error);\n            setError(error.message || \"Failed to withdraw collateral. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Handle force initialization\n    const handleForceInitialize = async () => {\n        setInitializingContracts(true);\n        setError(null);\n        \n        try {\n            const success = await forceInitialize();\n            if (success) {\n                setSuccess(\"Contracts initialized successfully!\");\n            } else {\n                setError(\"Failed to initialize contracts. Please check console for details.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Error initializing contracts: \" + error.message);\n        } finally {\n            setInitializingContracts(false);\n        }\n    };\n\n    // Check if contracts are initialized\n    const contractsInitialized = web3 && contracts && contracts.marginTrading && contracts.mockToken;\n\n    return (\n        <div className=\"card deposit-collateral\">\n            <h2>Deposit/Withdraw Collateral</h2>\n            \n            {!contractsInitialized && (\n                <div className=\"contract-initialization\">\n                    <div className=\"error-message\">\n                        Waiting for contract initialization... Please make sure you're connected to the Sepolia testnet.\n                    </div>\n                    <button \n                        className=\"action-button initialize-button\"\n                        onClick={handleForceInitialize}\n                        disabled={initializingContracts}\n                    >\n                        {initializingContracts ? 'Initializing...' : 'Force Initialize Contracts'}\n                    </button>\n                </div>\n            )}\n            \n            <div className=\"balance-info\">\n                <div className=\"balance-item\">\n                    <span>ETH Margin:</span>\n                    <span className=\"balance-value\">{parseFloat(userMargin).toFixed(4)} ETH</span>\n                </div>\n                <div className=\"balance-item\">\n                    <span>Token Margin:</span>\n                    <span className=\"balance-value\">{parseFloat(userTokenMargin).toFixed(2)} Tokens</span>\n                </div>\n                {collateralType === 'token' && (\n                    <>\n                        <div className=\"balance-item\">\n                            <span>Token Balance:</span>\n                            <span className=\"balance-value\">{parseFloat(tokenBalance).toFixed(2)} Tokens</span>\n                        </div>\n                        <div className=\"balance-item\">\n                            <span>Token Allowance:</span>\n                            <span className=\"balance-value\">{parseFloat(allowance).toFixed(2)} Tokens</span>\n                        </div>\n                    </>\n                )}\n            </div>\n            \n            <form onSubmit={handleDeposit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"amount\">Amount</label>\n                    <input\n                        type=\"number\"\n                        id=\"amount\"\n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                        step=\"0.01\"\n                        min=\"0.01\"\n                        placeholder=\"0.1\"\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"collateralType\">Collateral Type</label>\n                    <div className=\"collateral-selector\">\n                        <button \n                            type=\"button\" \n                            className={`collateral-btn ${collateralType === 'eth' ? 'active' : ''}`}\n                            onClick={() => setCollateralType('eth')}\n                        >\n                            ETH\n                        </button>\n                        <button \n                            type=\"button\" \n                            className={`collateral-btn ${collateralType === 'token' ? 'active' : ''}`}\n                            onClick={() => setCollateralType('token')}\n                        >\n                            Token\n                        </button>\n                    </div>\n                </div>\n\n                {error && <div className=\"error-message\">{error}</div>}\n                {success && <div className=\"success-message\">{success}</div>}\n\n                <div className=\"button-group\">\n                    {collateralType === 'token' && (\n                        <button \n                            type=\"button\" \n                            onClick={handleApproveToken}\n                            disabled={approvalLoading || !amount || !contractsInitialized} \n                            className=\"action-button approve-button\"\n                        >\n                            {approvalLoading ? 'Approving...' : 'Approve Tokens'}\n                        </button>\n                    )}\n                    <button \n                        type=\"submit\" \n                        disabled={loading || !amount || !contractsInitialized || \n                                (collateralType === 'token' && parseFloat(allowance) < parseFloat(amount))} \n                        className=\"action-button deposit-button\"\n                    >\n                        {loading ? 'Processing...' : 'Deposit'}\n                    </button>\n                    <button \n                        type=\"button\"\n                        onClick={handleWithdraw}\n                        disabled={loading || !amount || !contractsInitialized} \n                        className=\"action-button withdraw-button\"\n                    >\n                        {loading ? 'Processing...' : 'Withdraw'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default DepositCollateral;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}