{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n  marginTradeManager: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n  mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n  liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState({\n    marginTradeManager: null,\n    mockToken: null,\n    liquidationEngine: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [userMargin, setUserMargin] = useState('0');\n  const [userTokenMargin, setUserTokenMargin] = useState('0');\n\n  // Initialize contracts\n  const initializeContracts = useCallback(async (web3Instance, networkId) => {\n    console.log(\"Initializing contracts...\");\n    try {\n      if (!web3Instance) {\n        console.error(\"Web3 instance is null\");\n        setError(\"Web3 instance is not available. Please refresh the page.\");\n        return false;\n      }\n      try {\n        // Create contract instances\n        const marginTradeManagerContract = new web3Instance.eth.Contract(MarginTradeManagerABI.abi, CONTRACT_ADDRESSES.marginTradeManager);\n        const mockTokenContract = new web3Instance.eth.Contract(MockTokenABI.abi, CONTRACT_ADDRESSES.mockToken);\n        const liquidationEngineContract = new web3Instance.eth.Contract(LiquidationEngineABI.abi, CONTRACT_ADDRESSES.liquidationEngine);\n\n        // Verify contracts are working by calling a simple view function\n        try {\n          console.log(\"Testing contract connection...\");\n          await marginTradeManagerContract.methods.owner().call();\n          console.log(\"Successfully called contract function\");\n        } catch (callError) {\n          console.error(\"Error calling contract function:\", callError);\n          // Continue anyway, as the contract might still be usable\n        }\n\n        // Set the contracts in state\n        setContracts({\n          marginTradeManager: marginTradeManagerContract,\n          mockToken: mockTokenContract,\n          liquidationEngine: liquidationEngineContract\n        });\n        console.log(\"Contracts initialized successfully:\", {\n          marginTradeManager: marginTradeManagerContract.options.address,\n          mockToken: mockTokenContract.options.address,\n          liquidationEngine: liquidationEngineContract.options.address\n        });\n        setLoading(false);\n        return true;\n      } catch (contractError) {\n        console.error(\"Error creating contract instances:\", contractError);\n        setError(\"Failed to create contract instances. Please check your network connection.\");\n        setLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n      setLoading(false);\n      return false;\n    }\n  }, []);\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        console.log(\"Wallet connected:\", accounts[0]);\n\n        // Re-initialize contracts if they weren't initialized before\n        if (!isInitialized && web3) {\n          const networkId = await web3.eth.net.getId();\n          const success = await initializeContracts(web3, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        }\n        return true;\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n        return false;\n      }\n    } else {\n      setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      return false;\n    }\n  };\n\n  // Initialize web3 and contracts when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      try {\n        let web3Instance;\n\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          web3Instance = new Web3(window.ethereum);\n          console.log(\"Using window.ethereum provider\");\n          try {\n            // Request account access\n            const accounts = await window.ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n            setAccount(accounts[0]);\n            console.log(\"Connected account:\", accounts[0]);\n\n            // Get network ID\n            const networkId = await web3Instance.eth.net.getId();\n            setNetworkId(networkId);\n            console.log(\"Connected to network ID:\", networkId);\n            setWeb3(web3Instance);\n\n            // Initialize contracts\n            const success = await initializeContracts(web3Instance, networkId);\n            if (success) {\n              setIsInitialized(true);\n            }\n          } catch (error) {\n            console.error(\"User denied account access or there was an error:\", error);\n            setError(\"Failed to connect to your wallet. Please try again.\");\n          }\n        } else if (window.web3) {\n          // Legacy dapp browsers\n          web3Instance = new Web3(window.web3.currentProvider);\n          console.log(\"Using legacy web3 provider\");\n\n          // Get accounts\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n          console.log(\"Connected account:\", accounts[0]);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n          console.log(\"Connected to network ID:\", networkId);\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          const success = await initializeContracts(web3Instance, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        } else {\n          console.error(\"No Ethereum browser extension detected\");\n          setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(\"Error initializing web3:\", error);\n        setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        setLoading(false);\n      }\n    };\n    init();\n\n    // Setup event listeners for MetaMask\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          console.log(\"Account changed:\", accounts[0]);\n        } else {\n          setAccount(null);\n          console.log(\"Account disconnected\");\n        }\n      });\n      window.ethereum.on('chainChanged', () => {\n        console.log(\"Network changed, reloading page\");\n        window.location.reload();\n      });\n    }\n  }, [initializeContracts]);\n\n  // Fetch user margin data\n  useEffect(() => {\n    const fetchUserMargin = async () => {\n      if (web3 && contracts.marginTradeManager && account) {\n        try {\n          // Get ETH margin\n          const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n          setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n\n          // Get token margin\n          const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(account, contracts.mockToken.options.address).call();\n          setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n          console.log(\"User margins fetched:\", {\n            ethMargin: web3.utils.fromWei(ethMargin, 'ether'),\n            tokenMargin: web3.utils.fromWei(tokenMargin, 'ether')\n          });\n        } catch (error) {\n          console.error(\"Error fetching user margin:\", error);\n        }\n      }\n    };\n    if (isInitialized) {\n      fetchUserMargin();\n\n      // Set up an interval to fetch user margin every 30 seconds\n      const intervalId = setInterval(fetchUserMargin, 30000);\n      return () => clearInterval(intervalId);\n    }\n  }, [web3, contracts, account, isInitialized]);\n\n  // Force contract initialization if it failed initially\n  const forceInitialize = async () => {\n    if (web3 && account) {\n      const networkId = await web3.eth.net.getId();\n      const success = await initializeContracts(web3, networkId);\n      if (success) {\n        setIsInitialized(true);\n        return true;\n      }\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      account,\n      networkId,\n      contracts,\n      loading,\n      error,\n      connectWallet,\n      isInitialized,\n      forceInitialize,\n      userMargin,\n      userTokenMargin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"BMLqveW8mrwSmtpjHdLCo8rZFjE=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","LiquidationEngineABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTradeManager","mockToken","liquidationEngine","useWeb3","_s","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","isInitialized","setIsInitialized","userMargin","setUserMargin","userTokenMargin","setUserTokenMargin","initializeContracts","web3Instance","console","log","marginTradeManagerContract","eth","Contract","abi","mockTokenContract","liquidationEngineContract","methods","owner","call","callError","options","address","contractError","connectWallet","window","ethereum","accounts","request","method","net","getId","success","init","currentProvider","getAccounts","on","length","location","reload","fetchUserMargin","ethMargin","utils","fromWei","tokenMargin","intervalId","setInterval","clearInterval","forceInitialize","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; \n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n    marginTradeManager: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n    mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n    liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTradeManager: null,\n        mockToken: null,\n        liquidationEngine: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [userMargin, setUserMargin] = useState('0');\n    const [userTokenMargin, setUserTokenMargin] = useState('0');\n\n    // Initialize contracts\n    const initializeContracts = useCallback(async (web3Instance, networkId) => {\n        console.log(\"Initializing contracts...\");\n        try {\n            if (!web3Instance) {\n                console.error(\"Web3 instance is null\");\n                setError(\"Web3 instance is not available. Please refresh the page.\");\n                return false;\n            }\n\n            try {\n                // Create contract instances\n                const marginTradeManagerContract = new web3Instance.eth.Contract(\n                    MarginTradeManagerABI.abi,\n                    CONTRACT_ADDRESSES.marginTradeManager\n                );\n\n                const mockTokenContract = new web3Instance.eth.Contract(\n                    MockTokenABI.abi,\n                    CONTRACT_ADDRESSES.mockToken\n                );\n\n                const liquidationEngineContract = new web3Instance.eth.Contract(\n                    LiquidationEngineABI.abi,\n                    CONTRACT_ADDRESSES.liquidationEngine\n                );\n\n                // Verify contracts are working by calling a simple view function\n                try {\n                    console.log(\"Testing contract connection...\");\n                    await marginTradeManagerContract.methods.owner().call();\n                    console.log(\"Successfully called contract function\");\n                } catch (callError) {\n                    console.error(\"Error calling contract function:\", callError);\n                    // Continue anyway, as the contract might still be usable\n                }\n\n                // Set the contracts in state\n                setContracts({\n                    marginTradeManager: marginTradeManagerContract,\n                    mockToken: mockTokenContract,\n                    liquidationEngine: liquidationEngineContract\n                });\n\n                console.log(\"Contracts initialized successfully:\", {\n                    marginTradeManager: marginTradeManagerContract.options.address,\n                    mockToken: mockTokenContract.options.address,\n                    liquidationEngine: liquidationEngineContract.options.address\n                });\n                \n                setLoading(false);\n                return true;\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to create contract instances. Please check your network connection.\");\n                setLoading(false);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            setLoading(false);\n            return false;\n        }\n    }, []);\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n                console.log(\"Wallet connected:\", accounts[0]);\n                \n                // Re-initialize contracts if they weren't initialized before\n                if (!isInitialized && web3) {\n                    const networkId = await web3.eth.net.getId();\n                    const success = await initializeContracts(web3, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                }\n                \n                return true;\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n                return false;\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            return false;\n        }\n    };\n\n    // Initialize web3 and contracts when the component mounts\n    useEffect(() => {\n        const init = async () => {\n            try {\n                let web3Instance;\n                \n                // Check if MetaMask is installed\n                if (window.ethereum) {\n                    web3Instance = new Web3(window.ethereum);\n                    console.log(\"Using window.ethereum provider\");\n                    \n                    try {\n                        // Request account access\n                        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                        setAccount(accounts[0]);\n                        console.log(\"Connected account:\", accounts[0]);\n                        \n                        // Get network ID\n                        const networkId = await web3Instance.eth.net.getId();\n                        setNetworkId(networkId);\n                        console.log(\"Connected to network ID:\", networkId);\n                        \n                        setWeb3(web3Instance);\n                        \n                        // Initialize contracts\n                        const success = await initializeContracts(web3Instance, networkId);\n                        if (success) {\n                            setIsInitialized(true);\n                        }\n                        \n                    } catch (error) {\n                        console.error(\"User denied account access or there was an error:\", error);\n                        setError(\"Failed to connect to your wallet. Please try again.\");\n                    }\n                } else if (window.web3) {\n                    // Legacy dapp browsers\n                    web3Instance = new Web3(window.web3.currentProvider);\n                    console.log(\"Using legacy web3 provider\");\n                    \n                    // Get accounts\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n                    console.log(\"Connected account:\", accounts[0]);\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    console.log(\"Connected to network ID:\", networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    const success = await initializeContracts(web3Instance, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                    \n                } else {\n                    console.error(\"No Ethereum browser extension detected\");\n                    setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.error(\"Error initializing web3:\", error);\n                setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n                setLoading(false);\n            }\n        };\n        \n        init();\n        \n        // Setup event listeners for MetaMask\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    console.log(\"Account changed:\", accounts[0]);\n                } else {\n                    setAccount(null);\n                    console.log(\"Account disconnected\");\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                console.log(\"Network changed, reloading page\");\n                window.location.reload();\n            });\n        }\n        \n    }, [initializeContracts]);\n\n    // Fetch user margin data\n    useEffect(() => {\n        const fetchUserMargin = async () => {\n            if (web3 && contracts.marginTradeManager && account) {\n                try {\n                    // Get ETH margin\n                    const ethMargin = await contracts.marginTradeManager.methods.userMargin(account).call();\n                    setUserMargin(web3.utils.fromWei(ethMargin, 'ether'));\n                    \n                    // Get token margin\n                    const tokenMargin = await contracts.marginTradeManager.methods.userTokenMargin(\n                        account, \n                        contracts.mockToken.options.address\n                    ).call();\n                    setUserTokenMargin(web3.utils.fromWei(tokenMargin, 'ether'));\n                    \n                    console.log(\"User margins fetched:\", {\n                        ethMargin: web3.utils.fromWei(ethMargin, 'ether'),\n                        tokenMargin: web3.utils.fromWei(tokenMargin, 'ether')\n                    });\n                } catch (error) {\n                    console.error(\"Error fetching user margin:\", error);\n                }\n            }\n        };\n        \n        if (isInitialized) {\n            fetchUserMargin();\n            \n            // Set up an interval to fetch user margin every 30 seconds\n            const intervalId = setInterval(fetchUserMargin, 30000);\n            \n            return () => clearInterval(intervalId);\n        }\n    }, [web3, contracts, account, isInitialized]);\n\n    // Force contract initialization if it failed initially\n    const forceInitialize = async () => {\n        if (web3 && account) {\n            const networkId = await web3.eth.net.getId();\n            const success = await initializeContracts(web3, networkId);\n            if (success) {\n                setIsInitialized(true);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    return (\n        <Web3Context.Provider value={{ \n            web3, \n            account, \n            networkId, \n            contracts, \n            loading, \n            error,\n            connectWallet,\n            isInitialized,\n            forceInitialize,\n            userMargin,\n            userTokenMargin\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}