{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed ABI for now\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n  marginTrading: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n  mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n  liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState({\n    marginTrading: null,\n    mockToken: null,\n    liquidationEngine: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Initialize web3\n  const initializeWeb3 = useCallback(async () => {\n    try {\n      let web3Instance;\n\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        web3Instance = new Web3(window.ethereum);\n        console.log(\"Using window.ethereum provider\");\n        try {\n          // Request account access\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          setAccount(accounts[0]);\n          console.log(\"Connected account:\", accounts[0]);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n          console.log(\"Connected to network ID:\", networkId);\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          const success = await initializeContracts(web3Instance, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        } catch (error) {\n          console.error(\"User denied account access or there was an error:\", error);\n          setError(\"Failed to connect to your wallet. Please try again.\");\n        }\n      } else if (window.web3) {\n        // Legacy dapp browsers\n        web3Instance = new Web3(window.web3.currentProvider);\n        console.log(\"Using legacy web3 provider\");\n\n        // Get accounts\n        const accounts = await web3Instance.eth.getAccounts();\n        setAccount(accounts[0]);\n        console.log(\"Connected account:\", accounts[0]);\n\n        // Get network ID\n        const networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n        console.log(\"Connected to network ID:\", networkId);\n        setWeb3(web3Instance);\n\n        // Initialize contracts\n        const success = await initializeContracts(web3Instance, networkId);\n        if (success) {\n          setIsInitialized(true);\n        }\n      } else {\n        console.error(\"No Ethereum browser extension detected\");\n        setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing web3:\", error);\n      setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      console.log(\"Initializing contracts for network ID:\", networkId);\n      if (!web3Instance) {\n        console.error(\"Web3 instance is null\");\n        setError(\"Web3 instance is not initialized\");\n        return false;\n      }\n\n      // For testing purposes, allow any network ID\n      // In production, you would want to restrict to Sepolia (11155111)\n      console.log(`Connected to network ${networkId}, proceeding with contract initialization`);\n\n      // Use the contract addresses from the constant\n      const marginTradingAddress = CONTRACT_ADDRESSES.marginTrading;\n      const mockTokenAddress = CONTRACT_ADDRESSES.mockToken;\n      const liquidationEngineAddress = CONTRACT_ADDRESSES.liquidationEngine;\n      if (!marginTradingAddress || !mockTokenAddress || !liquidationEngineAddress) {\n        console.error(\"One or more contract addresses are undefined\");\n        setError(\"Contract addresses are not properly configured\");\n        return false;\n      }\n      console.log(\"Using contract addresses:\", {\n        marginTradingAddress,\n        mockTokenAddress,\n        liquidationEngineAddress\n      });\n\n      // Verify ABIs are loaded\n      if (!MarginTradeManagerABI || !MockTokenABI || !LiquidationEngineABI) {\n        console.error(\"One or more ABIs are undefined\");\n        setError(\"Contract ABIs are not properly loaded\");\n        return false;\n      }\n      try {\n        // Initialize contract instances\n        const marginTradingContract = new web3Instance.eth.Contract(MarginTradeManagerABI, marginTradingAddress);\n        const mockTokenContract = new web3Instance.eth.Contract(MockTokenABI, mockTokenAddress);\n        const liquidationEngineContract = new web3Instance.eth.Contract(LiquidationEngineABI, liquidationEngineAddress);\n\n        // Verify contract instances\n        if (!marginTradingContract || !mockTokenContract || !liquidationEngineContract) {\n          console.error(\"One or more contract instances failed to initialize\");\n          setError(\"Failed to initialize contract instances\");\n          return false;\n        }\n\n        // Try to call a simple view function to verify contract connection\n        try {\n          // Test if we can call a function on the contract\n          await marginTradingContract.methods.owner().call();\n          console.log(\"Successfully called contract function\");\n        } catch (callError) {\n          console.error(\"Error calling contract function:\", callError);\n          // Continue anyway, as the contract might still be usable\n        }\n\n        // Set the contracts in state\n        setContracts({\n          marginTrading: marginTradingContract,\n          mockToken: mockTokenContract,\n          liquidationEngine: liquidationEngineContract\n        });\n        console.log(\"Contracts initialized successfully:\", {\n          marginTrading: marginTradingContract.options.address,\n          mockToken: mockTokenContract.options.address,\n          liquidationEngine: liquidationEngineContract.options.address\n        });\n        return true;\n      } catch (contractError) {\n        console.error(\"Error creating contract instances:\", contractError);\n        setError(\"Failed to create contract instances. Please check your network connection.\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n      return false;\n    }\n  };\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        console.log(\"Wallet connected:\", accounts[0]);\n\n        // Re-initialize contracts if they weren't initialized before\n        if (!isInitialized && web3) {\n          const networkId = await web3.eth.net.getId();\n          const success = await initializeContracts(web3, networkId);\n          if (success) {\n            setIsInitialized(true);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n      }\n    } else {\n      setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n    }\n  };\n\n  // Initialize web3 and contracts when the component mounts\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          console.log(\"Account changed:\", accounts[0]);\n        } else {\n          setAccount(null);\n          console.log(\"Account disconnected\");\n        }\n      });\n      window.ethereum.on('chainChanged', () => {\n        console.log(\"Network changed, reloading page\");\n        window.location.reload();\n      });\n    }\n    initializeWeb3();\n  }, [initializeWeb3]);\n\n  // Force contract initialization if it failed initially\n  const forceInitialize = async () => {\n    if (web3 && account) {\n      const networkId = await web3.eth.net.getId();\n      const success = await initializeContracts(web3, networkId);\n      if (success) {\n        setIsInitialized(true);\n        return true;\n      }\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      account,\n      networkId,\n      contracts,\n      loading,\n      error,\n      connectWallet,\n      isInitialized,\n      forceInitialize\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"1BMJBer5/6pKsf00xtrHS4oMCPE=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","LiquidationEngineABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTrading","mockToken","liquidationEngine","useWeb3","_s","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","isInitialized","setIsInitialized","initializeWeb3","web3Instance","window","ethereum","console","log","accounts","request","method","eth","net","getId","success","initializeContracts","currentProvider","getAccounts","marginTradingAddress","mockTokenAddress","liquidationEngineAddress","marginTradingContract","Contract","mockTokenContract","liquidationEngineContract","methods","owner","call","callError","options","address","contractError","connectWallet","on","length","location","reload","forceInitialize","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed ABI for now\n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n    marginTrading: \"0xfd79e1b120f3ae000f2d79aceca92aaec0b34c14\",\n    mockToken: \"0x6bb00934fd4f6db39f475bf39283981a20ecce5b\",\n    liquidationEngine: \"0x290346048a11574a6beb6e0b3b0e353b0be1cd0d\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTrading: null,\n        mockToken: null,\n        liquidationEngine: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isInitialized, setIsInitialized] = useState(false);\n\n    // Initialize web3\n    const initializeWeb3 = useCallback(async () => {\n        try {\n            let web3Instance;\n            \n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                web3Instance = new Web3(window.ethereum);\n                console.log(\"Using window.ethereum provider\");\n                \n                try {\n                    // Request account access\n                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    setAccount(accounts[0]);\n                    console.log(\"Connected account:\", accounts[0]);\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    console.log(\"Connected to network ID:\", networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    const success = await initializeContracts(web3Instance, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                    \n                } catch (error) {\n                    console.error(\"User denied account access or there was an error:\", error);\n                    setError(\"Failed to connect to your wallet. Please try again.\");\n                }\n            } else if (window.web3) {\n                // Legacy dapp browsers\n                web3Instance = new Web3(window.web3.currentProvider);\n                console.log(\"Using legacy web3 provider\");\n                \n                // Get accounts\n                const accounts = await web3Instance.eth.getAccounts();\n                setAccount(accounts[0]);\n                console.log(\"Connected account:\", accounts[0]);\n                \n                // Get network ID\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                console.log(\"Connected to network ID:\", networkId);\n                \n                setWeb3(web3Instance);\n                \n                // Initialize contracts\n                const success = await initializeContracts(web3Instance, networkId);\n                if (success) {\n                    setIsInitialized(true);\n                }\n                \n            } else {\n                console.error(\"No Ethereum browser extension detected\");\n                setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing web3:\", error);\n            setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    // Initialize contracts\n    const initializeContracts = async (web3Instance, networkId) => {\n        try {\n            console.log(\"Initializing contracts for network ID:\", networkId);\n\n            if (!web3Instance) {\n                console.error(\"Web3 instance is null\");\n                setError(\"Web3 instance is not initialized\");\n                return false;\n            }\n\n            // For testing purposes, allow any network ID\n            // In production, you would want to restrict to Sepolia (11155111)\n            console.log(`Connected to network ${networkId}, proceeding with contract initialization`);\n\n            // Use the contract addresses from the constant\n            const marginTradingAddress = CONTRACT_ADDRESSES.marginTrading;\n            const mockTokenAddress = CONTRACT_ADDRESSES.mockToken;\n            const liquidationEngineAddress = CONTRACT_ADDRESSES.liquidationEngine;\n\n            if (!marginTradingAddress || !mockTokenAddress || !liquidationEngineAddress) {\n                console.error(\"One or more contract addresses are undefined\");\n                setError(\"Contract addresses are not properly configured\");\n                return false;\n            }\n\n            console.log(\"Using contract addresses:\", {\n                marginTradingAddress,\n                mockTokenAddress,\n                liquidationEngineAddress\n            });\n\n            // Verify ABIs are loaded\n            if (!MarginTradeManagerABI || !MockTokenABI || !LiquidationEngineABI) {\n                console.error(\"One or more ABIs are undefined\");\n                setError(\"Contract ABIs are not properly loaded\");\n                return false;\n            }\n\n            try {\n                // Initialize contract instances\n                const marginTradingContract = new web3Instance.eth.Contract(\n                    MarginTradeManagerABI,\n                    marginTradingAddress\n                );\n\n                const mockTokenContract = new web3Instance.eth.Contract(\n                    MockTokenABI,\n                    mockTokenAddress\n                );\n\n                const liquidationEngineContract = new web3Instance.eth.Contract(\n                    LiquidationEngineABI,\n                    liquidationEngineAddress\n                );\n\n                // Verify contract instances\n                if (!marginTradingContract || !mockTokenContract || !liquidationEngineContract) {\n                    console.error(\"One or more contract instances failed to initialize\");\n                    setError(\"Failed to initialize contract instances\");\n                    return false;\n                }\n\n                // Try to call a simple view function to verify contract connection\n                try {\n                    // Test if we can call a function on the contract\n                    await marginTradingContract.methods.owner().call();\n                    console.log(\"Successfully called contract function\");\n                } catch (callError) {\n                    console.error(\"Error calling contract function:\", callError);\n                    // Continue anyway, as the contract might still be usable\n                }\n\n                // Set the contracts in state\n                setContracts({\n                    marginTrading: marginTradingContract,\n                    mockToken: mockTokenContract,\n                    liquidationEngine: liquidationEngineContract\n                });\n\n                console.log(\"Contracts initialized successfully:\", {\n                    marginTrading: marginTradingContract.options.address,\n                    mockToken: mockTokenContract.options.address,\n                    liquidationEngine: liquidationEngineContract.options.address\n                });\n                \n                return true;\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to create contract instances. Please check your network connection.\");\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            return false;\n        }\n    };\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n                console.log(\"Wallet connected:\", accounts[0]);\n                \n                // Re-initialize contracts if they weren't initialized before\n                if (!isInitialized && web3) {\n                    const networkId = await web3.eth.net.getId();\n                    const success = await initializeContracts(web3, networkId);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n        }\n    };\n\n    // Initialize web3 and contracts when the component mounts\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    console.log(\"Account changed:\", accounts[0]);\n                } else {\n                    setAccount(null);\n                    console.log(\"Account disconnected\");\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                console.log(\"Network changed, reloading page\");\n                window.location.reload();\n            });\n        }\n        \n        initializeWeb3();\n    }, [initializeWeb3]);\n\n    // Force contract initialization if it failed initially\n    const forceInitialize = async () => {\n        if (web3 && account) {\n            const networkId = await web3.eth.net.getId();\n            const success = await initializeContracts(web3, networkId);\n            if (success) {\n                setIsInitialized(true);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    return (\n        <Web3Context.Provider value={{ \n            web3, \n            account, \n            networkId, \n            contracts, \n            loading, \n            error,\n            connectWallet,\n            isInitialized,\n            forceInitialize\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}