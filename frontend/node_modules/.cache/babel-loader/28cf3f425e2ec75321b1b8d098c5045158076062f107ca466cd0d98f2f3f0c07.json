{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../contracts/MarginTrading.json';\nimport MockToken from '../contracts/MockToken.json';\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      var _MarginTrading$networ, _MockToken$networks$n, _MockPriceFeed$networ;\n      // Check network ID\n      if (!networkId) {\n        networkId = await web3Instance.eth.net.getId();\n      }\n\n      // Initialize contracts with error handling\n      const marginTradingAddress = (_MarginTrading$networ = MarginTrading.networks[networkId]) === null || _MarginTrading$networ === void 0 ? void 0 : _MarginTrading$networ.address;\n      const mockTokenAddress = (_MockToken$networks$n = MockToken.networks[networkId]) === null || _MockToken$networks$n === void 0 ? void 0 : _MockToken$networks$n.address;\n      const mockPriceFeedAddress = (_MockPriceFeed$networ = MockPriceFeed.networks[networkId]) === null || _MockPriceFeed$networ === void 0 ? void 0 : _MockPriceFeed$networ.address;\n      if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\n        throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\n      }\n      const marginTradingContract = new web3Instance.eth.Contract(MarginTrading.abi, marginTradingAddress);\n      const mockTokenContract = new web3Instance.eth.Contract(MockToken.abi, mockTokenAddress);\n      const mockPriceFeedContract = new web3Instance.eth.Contract(MockPriceFeed.abi, mockPriceFeedAddress);\n      return {\n        marginTrading: marginTradingContract,\n        mockToken: mockTokenContract,\n        mockPriceFeed: mockPriceFeedContract\n      };\n    } catch (error) {\n      console.error(\"Contract initialization error:\", error);\n      setError(`Contract initialization failed: ${error.message}`);\n      return null;\n    }\n  };\n\n  // Function to connect wallet (to be called by button)\n  const connectWallet = async () => {\n    try {\n      setError(null);\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n      }\n      setAccount(accounts[0]);\n\n      // Initialize Web3 if not already initialized\n      if (!web3) {\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n\n        // Initialize contracts\n        const networkId = await web3Instance.eth.net.getId();\n        const contractInstances = await initializeContracts(web3Instance, networkId);\n        setContracts(contractInstances);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Wallet connection error:\", error);\n      setError(error.message);\n      return false;\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n\n          // Check if already connected\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n\n            // Initialize contracts\n            const networkId = await web3Instance.eth.net.getId();\n            const contractInstances = await initializeContracts(web3Instance, networkId);\n            setContracts(contractInstances);\n          }\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', newAccounts => {\n            if (newAccounts.length === 0) {\n              // User disconnected their wallet\n              setAccount(null);\n            } else {\n              setAccount(newAccounts[0]);\n            }\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        }\n      } catch (error) {\n        console.error(\"Initialization error:\", error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    init();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      contracts,\n      account,\n      loading,\n      error,\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"0/XNWFx2AxaD1gglK9QxRylfHFA=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","Web3","MarginTrading","MockToken","MockPriceFeed","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","web3","setWeb3","contracts","setContracts","account","setAccount","loading","setLoading","error","setError","initializeContracts","web3Instance","networkId","_MarginTrading$networ","_MockToken$networks$n","_MockPriceFeed$networ","eth","net","getId","marginTradingAddress","networks","address","mockTokenAddress","mockPriceFeedAddress","marginTradingContract","Contract","abi","mockTokenContract","mockPriceFeedContract","marginTrading","mockToken","mockPriceFeed","console","message","connectWallet","window","ethereum","accounts","request","method","length","contractInstances","init","getAccounts","on","newAccounts","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport Web3 from 'web3';\r\nimport MarginTrading from '../contracts/MarginTrading.json';\r\nimport MockToken from '../contracts/MockToken.json';\r\nimport MockPriceFeed from '../contracts/MockPriceFeed.json';\r\n\r\nexport const Web3Context = createContext();\r\n\r\nexport const useWeb3 = () => {\r\n    const context = useContext(Web3Context);\r\n    if (!context) {\r\n        throw new Error('useWeb3 must be used within a Web3Provider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n    const [web3, setWeb3] = useState(null);\r\n    const [contracts, setContracts] = useState(null);\r\n    const [account, setAccount] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Function to initialize contracts\r\n    const initializeContracts = async (web3Instance, networkId) => {\r\n        try {\r\n            // Check network ID\r\n            if (!networkId) {\r\n                networkId = await web3Instance.eth.net.getId();\r\n            }\r\n\r\n            // Initialize contracts with error handling\r\n            const marginTradingAddress = MarginTrading.networks[networkId]?.address;\r\n            const mockTokenAddress = MockToken.networks[networkId]?.address;\r\n            const mockPriceFeedAddress = MockPriceFeed.networks[networkId]?.address;\r\n\r\n            if (!marginTradingAddress || !mockTokenAddress || !mockPriceFeedAddress) {\r\n                throw new Error(`Smart contracts not deployed on network ID ${networkId}`);\r\n            }\r\n\r\n            const marginTradingContract = new web3Instance.eth.Contract(\r\n                MarginTrading.abi,\r\n                marginTradingAddress\r\n            );\r\n\r\n            const mockTokenContract = new web3Instance.eth.Contract(\r\n                MockToken.abi,\r\n                mockTokenAddress\r\n            );\r\n\r\n            const mockPriceFeedContract = new web3Instance.eth.Contract(\r\n                MockPriceFeed.abi,\r\n                mockPriceFeedAddress\r\n            );\r\n\r\n            return {\r\n                marginTrading: marginTradingContract,\r\n                mockToken: mockTokenContract,\r\n                mockPriceFeed: mockPriceFeedContract\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Contract initialization error:\", error);\r\n            setError(`Contract initialization failed: ${error.message}`);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Function to connect wallet (to be called by button)\r\n    const connectWallet = async () => {\r\n        try {\r\n            setError(null);\r\n\r\n            if (!window.ethereum) {\r\n                throw new Error(\"MetaMask is not installed. Please install MetaMask to use this application.\");\r\n            }\r\n\r\n            // Request account access\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n            if (accounts.length === 0) {\r\n                throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\r\n            }\r\n\r\n            setAccount(accounts[0]);\r\n\r\n            // Initialize Web3 if not already initialized\r\n            if (!web3) {\r\n                const web3Instance = new Web3(window.ethereum);\r\n                setWeb3(web3Instance);\r\n\r\n                // Initialize contracts\r\n                const networkId = await web3Instance.eth.net.getId();\r\n                const contractInstances = await initializeContracts(web3Instance, networkId);\r\n                setContracts(contractInstances);\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Wallet connection error:\", error);\r\n            setError(error.message);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            try {\r\n                // Check if MetaMask is installed\r\n                if (window.ethereum) {\r\n                    const web3Instance = new Web3(window.ethereum);\r\n                    setWeb3(web3Instance);\r\n\r\n                    // Check if already connected\r\n                    const accounts = await web3Instance.eth.getAccounts();\r\n                    if (accounts.length > 0) {\r\n                        setAccount(accounts[0]);\r\n\r\n                        // Initialize contracts\r\n                        const networkId = await web3Instance.eth.net.getId();\r\n                        const contractInstances = await initializeContracts(web3Instance, networkId);\r\n                        setContracts(contractInstances);\r\n                    }\r\n\r\n                    // Listen for account changes\r\n                    window.ethereum.on('accountsChanged', (newAccounts) => {\r\n                        if (newAccounts.length === 0) {\r\n                            // User disconnected their wallet\r\n                            setAccount(null);\r\n                        } else {\r\n                            setAccount(newAccounts[0]);\r\n                        }\r\n                    });\r\n\r\n                    // Listen for network changes\r\n                    window.ethereum.on('chainChanged', () => {\r\n                        window.location.reload();\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Initialization error:\", error);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        init();\r\n    }, []);\r\n\r\n    return (\r\n        <Web3Context.Provider value={{\r\n            web3,\r\n            contracts,\r\n            account,\r\n            loading,\r\n            error,\r\n            connectWallet\r\n        }}>\r\n            {children}\r\n        </Web3Context.Provider>\r\n    );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,aAAa,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMW,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGV,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAM2B,mBAAmB,GAAG,MAAAA,CAAOC,YAAY,EAAEC,SAAS,KAAK;IAC3D,IAAI;MAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MACA;MACA,IAAI,CAACH,SAAS,EAAE;QACZA,SAAS,GAAG,MAAMD,YAAY,CAACK,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;MAClD;;MAEA;MACA,MAAMC,oBAAoB,IAAAN,qBAAA,GAAG1B,aAAa,CAACiC,QAAQ,CAACR,SAAS,CAAC,cAAAC,qBAAA,uBAAjCA,qBAAA,CAAmCQ,OAAO;MACvE,MAAMC,gBAAgB,IAAAR,qBAAA,GAAG1B,SAAS,CAACgC,QAAQ,CAACR,SAAS,CAAC,cAAAE,qBAAA,uBAA7BA,qBAAA,CAA+BO,OAAO;MAC/D,MAAME,oBAAoB,IAAAR,qBAAA,GAAG1B,aAAa,CAAC+B,QAAQ,CAACR,SAAS,CAAC,cAAAG,qBAAA,uBAAjCA,qBAAA,CAAmCM,OAAO;MAEvE,IAAI,CAACF,oBAAoB,IAAI,CAACG,gBAAgB,IAAI,CAACC,oBAAoB,EAAE;QACrE,MAAM,IAAI3B,KAAK,CAAC,8CAA8CgB,SAAS,EAAE,CAAC;MAC9E;MAEA,MAAMY,qBAAqB,GAAG,IAAIb,YAAY,CAACK,GAAG,CAACS,QAAQ,CACvDtC,aAAa,CAACuC,GAAG,EACjBP,oBACJ,CAAC;MAED,MAAMQ,iBAAiB,GAAG,IAAIhB,YAAY,CAACK,GAAG,CAACS,QAAQ,CACnDrC,SAAS,CAACsC,GAAG,EACbJ,gBACJ,CAAC;MAED,MAAMM,qBAAqB,GAAG,IAAIjB,YAAY,CAACK,GAAG,CAACS,QAAQ,CACvDpC,aAAa,CAACqC,GAAG,EACjBH,oBACJ,CAAC;MAED,OAAO;QACHM,aAAa,EAAEL,qBAAqB;QACpCM,SAAS,EAAEH,iBAAiB;QAC5BI,aAAa,EAAEH;MACnB,CAAC;IACL,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZwB,OAAO,CAACxB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,QAAQ,CAAC,mCAAmCD,KAAK,CAACyB,OAAO,EAAE,CAAC;MAC5D,OAAO,IAAI;IACf;EACJ,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACAzB,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI,CAAC0B,MAAM,CAACC,QAAQ,EAAE;QAClB,MAAM,IAAIxC,KAAK,CAAC,6EAA6E,CAAC;MAClG;;MAEA;MACA,MAAMyC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAEjF,IAAIF,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,IAAI5C,KAAK,CAAC,0DAA0D,CAAC;MAC/E;MAEAS,UAAU,CAACgC,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEvB;MACA,IAAI,CAACrC,IAAI,EAAE;QACP,MAAMW,YAAY,GAAG,IAAIzB,IAAI,CAACiD,MAAM,CAACC,QAAQ,CAAC;QAC9CnC,OAAO,CAACU,YAAY,CAAC;;QAErB;QACA,MAAMC,SAAS,GAAG,MAAMD,YAAY,CAACK,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;QACpD,MAAMuB,iBAAiB,GAAG,MAAM/B,mBAAmB,CAACC,YAAY,EAAEC,SAAS,CAAC;QAC5ET,YAAY,CAACsC,iBAAiB,CAAC;MACnC;MAEA,OAAO,IAAI;IACf,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACZwB,OAAO,CAACxB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAACD,KAAK,CAACyB,OAAO,CAAC;MACvB,OAAO,KAAK;IAChB;EACJ,CAAC;EAEDjD,SAAS,CAAC,MAAM;IACZ,MAAM0D,IAAI,GAAG,MAAAA,CAAA,KAAY;MACrB,IAAI;QACA;QACA,IAAIP,MAAM,CAACC,QAAQ,EAAE;UACjB,MAAMzB,YAAY,GAAG,IAAIzB,IAAI,CAACiD,MAAM,CAACC,QAAQ,CAAC;UAC9CnC,OAAO,CAACU,YAAY,CAAC;;UAErB;UACA,MAAM0B,QAAQ,GAAG,MAAM1B,YAAY,CAACK,GAAG,CAAC2B,WAAW,CAAC,CAAC;UACrD,IAAIN,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;YACrBnC,UAAU,CAACgC,QAAQ,CAAC,CAAC,CAAC,CAAC;;YAEvB;YACA,MAAMzB,SAAS,GAAG,MAAMD,YAAY,CAACK,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;YACpD,MAAMuB,iBAAiB,GAAG,MAAM/B,mBAAmB,CAACC,YAAY,EAAEC,SAAS,CAAC;YAC5ET,YAAY,CAACsC,iBAAiB,CAAC;UACnC;;UAEA;UACAN,MAAM,CAACC,QAAQ,CAACQ,EAAE,CAAC,iBAAiB,EAAGC,WAAW,IAAK;YACnD,IAAIA,WAAW,CAACL,MAAM,KAAK,CAAC,EAAE;cAC1B;cACAnC,UAAU,CAAC,IAAI,CAAC;YACpB,CAAC,MAAM;cACHA,UAAU,CAACwC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC9B;UACJ,CAAC,CAAC;;UAEF;UACAV,MAAM,CAACC,QAAQ,CAACQ,EAAE,CAAC,cAAc,EAAE,MAAM;YACrCT,MAAM,CAACW,QAAQ,CAACC,MAAM,CAAC,CAAC;UAC5B,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,OAAOvC,KAAK,EAAE;QACZwB,OAAO,CAACxB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CC,QAAQ,CAACD,KAAK,CAACyB,OAAO,CAAC;MAC3B,CAAC,SAAS;QACN1B,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDmC,IAAI,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACInD,OAAA,CAACC,WAAW,CAACwD,QAAQ;IAACC,KAAK,EAAE;MACzBjD,IAAI;MACJE,SAAS;MACTE,OAAO;MACPE,OAAO;MACPE,KAAK;MACL0B;IACJ,CAAE;IAAApC,QAAA,EACGA;EAAQ;IAAAoD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACtD,GAAA,CAjJWF,YAAY;AAAAyD,EAAA,GAAZzD,YAAY;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}