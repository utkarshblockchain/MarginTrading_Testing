{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport MarginTrading from '../../contracts/MarginTrading.json';\nimport MockToken from '../../contracts/MockToken.json';\nimport MockPriceFeed from '../../contracts/MockPriceFeed.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/createContext();\nexport const Web3Provider = ({\n  children\n}) => {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initWeb3 = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          var _MarginTrading$networ, _MockToken$networks$n, _MockPriceFeed$networ;\n          const web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n\n          // Request account access\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          setAccount(accounts[0]);\n\n          // Initialize contracts\n          const networkId = await web3Instance.eth.net.getId();\n          const marginTradingContract = new web3Instance.eth.Contract(MarginTrading.abi, (_MarginTrading$networ = MarginTrading.networks[networkId]) === null || _MarginTrading$networ === void 0 ? void 0 : _MarginTrading$networ.address);\n          const mockTokenContract = new web3Instance.eth.Contract(MockToken.abi, (_MockToken$networks$n = MockToken.networks[networkId]) === null || _MockToken$networks$n === void 0 ? void 0 : _MockToken$networks$n.address);\n          const mockPriceFeedContract = new web3Instance.eth.Contract(MockPriceFeed.abi, (_MockPriceFeed$networ = MockPriceFeed.networks[networkId]) === null || _MockPriceFeed$networ === void 0 ? void 0 : _MockPriceFeed$networ.address);\n          setContracts({\n            marginTrading: marginTradingContract,\n            mockToken: mockTokenContract,\n            mockPriceFeed: mockPriceFeedContract\n          });\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', accounts => {\n            setAccount(accounts[0]);\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        } else {\n          setError('Please install MetaMask to use this application');\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initWeb3();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      contracts,\n      account,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Web3Provider, \"0/XNWFx2AxaD1gglK9QxRylfHFA=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","Web3","MarginTrading","MockToken","MockPriceFeed","jsxDEV","_jsxDEV","Web3Context","Web3Provider","children","_s","web3","setWeb3","contracts","setContracts","account","setAccount","loading","setLoading","error","setError","initWeb3","window","ethereum","_MarginTrading$networ","_MockToken$networks$n","_MockPriceFeed$networ","web3Instance","accounts","request","method","networkId","eth","net","getId","marginTradingContract","Contract","abi","networks","address","mockTokenContract","mockPriceFeedContract","marginTrading","mockToken","mockPriceFeed","on","location","reload","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport MarginTrading from '../../contracts/MarginTrading.json';\r\nimport MockToken from '../../contracts/MockToken.json';\r\nimport MockPriceFeed from '../../contracts/MockPriceFeed.json';\r\n\r\nexport const Web3Context = createContext();\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n    const [web3, setWeb3] = useState(null);\r\n    const [contracts, setContracts] = useState(null);\r\n    const [account, setAccount] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const initWeb3 = async () => {\r\n            try {\r\n                // Check if MetaMask is installed\r\n                if (window.ethereum) {\r\n                    const web3Instance = new Web3(window.ethereum);\r\n                    setWeb3(web3Instance);\r\n\r\n                    // Request account access\r\n                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                    setAccount(accounts[0]);\r\n\r\n                    // Initialize contracts\r\n                    const networkId = await web3Instance.eth.net.getId();\r\n\r\n                    const marginTradingContract = new web3Instance.eth.Contract(\r\n                        MarginTrading.abi,\r\n                        MarginTrading.networks[networkId]?.address\r\n                    );\r\n\r\n                    const mockTokenContract = new web3Instance.eth.Contract(\r\n                        MockToken.abi,\r\n                        MockToken.networks[networkId]?.address\r\n                    );\r\n\r\n                    const mockPriceFeedContract = new web3Instance.eth.Contract(\r\n                        MockPriceFeed.abi,\r\n                        MockPriceFeed.networks[networkId]?.address\r\n                    );\r\n\r\n                    setContracts({\r\n                        marginTrading: marginTradingContract,\r\n                        mockToken: mockTokenContract,\r\n                        mockPriceFeed: mockPriceFeedContract\r\n                    });\r\n\r\n                    // Listen for account changes\r\n                    window.ethereum.on('accountsChanged', (accounts) => {\r\n                        setAccount(accounts[0]);\r\n                    });\r\n\r\n                    // Listen for network changes\r\n                    window.ethereum.on('chainChanged', () => {\r\n                        window.location.reload();\r\n                    });\r\n                } else {\r\n                    setError('Please install MetaMask to use this application');\r\n                }\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        initWeb3();\r\n    }, []);\r\n\r\n    return (\r\n        <Web3Context.Provider value={{ web3, contracts, account, loading, error }}>\r\n            {children}\r\n        </Web3Context.Provider>\r\n    );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}