{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs - use the correct paths and names\nimport MarginTradingABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed as LiquidationEngine for now\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet - using the exact addresses provided\nconst CONTRACT_ADDRESSES = {\n  11155111: {\n    // Sepolia\n    marginTrading: '0xfD79e1b120f3aE000f2d79aCEca92Aaec0B34C14',\n    mockToken: '0x6Bb00934FD4f6db39F475Bf39283981A20eCCe5b',\n    liquidationEngine: '0x290346048a11574A6bEb6E0B3B0E353b0bE1cD0D'\n  }\n  // Add other networks as needed\n};\nexport const Web3Provider = ({\n  children\n}) => {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [ethPrice, setEthPrice] = useState('1500.00'); // Default price\n\n  // Initialize web3\n  const initializeWeb3 = async () => {\n    try {\n      let web3Instance;\n\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        web3Instance = new Web3(window.ethereum);\n        try {\n          // Request account access\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          // Get the connected account\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n\n          // Set up event listeners for account and network changes\n          window.ethereum.on('accountsChanged', accounts => {\n            setAccount(accounts[0]);\n          });\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          await initializeContracts(web3Instance, networkId);\n        } catch (error) {\n          console.error(\"User denied account access\", error);\n          setError(\"Please connect your MetaMask wallet to use this application.\");\n        }\n      } else {\n        console.error(\"MetaMask is not installed\");\n        setError(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing web3\", error);\n      setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize contracts\n  const initializeContracts = async (web3Instance, networkId) => {\n    try {\n      // Check if the network is supported\n      if (!CONTRACT_ADDRESSES[networkId]) {\n        console.error(`Network ID ${networkId} not supported`);\n        setError(`Network not supported. Please switch to Sepolia testnet.`);\n        return;\n      }\n      const addresses = CONTRACT_ADDRESSES[networkId];\n      console.log(\"Initializing contracts with addresses:\", addresses);\n      try {\n        // Initialize contracts with proper error handling\n        const marginTrading = new web3Instance.eth.Contract(MarginTradingABI.abi,\n        // Access the ABI property\n        addresses.marginTrading);\n        const mockToken = new web3Instance.eth.Contract(MockTokenABI.abi,\n        // Access the ABI property\n        addresses.mockToken);\n        const liquidationEngine = new web3Instance.eth.Contract(LiquidationEngineABI.abi,\n        // Access the ABI property\n        addresses.liquidationEngine);\n        console.log(\"Contracts initialized successfully\");\n        setContracts({\n          marginTrading,\n          mockToken,\n          liquidationEngine\n        });\n\n        // Fetch initial ETH price\n        await fetchEthPrice();\n      } catch (contractError) {\n        console.error(\"Error creating contract instances:\", contractError);\n        setError(\"Failed to initialize contract instances. Please check the contract ABIs and addresses.\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n    }\n  };\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    setLoading(true);\n    setError(null);\n    await initializeWeb3();\n  };\n\n  // Fetch ETH price (simulated for now)\n  const fetchEthPrice = async () => {\n    try {\n      // In a real application, you would fetch this from an oracle or API\n      // For now, we'll simulate a price with some random variation\n      const basePrice = 1500;\n      const randomVariation = Math.random() * 200 - 100; // -100 to +100\n      const simulatedPrice = (basePrice + randomVariation).toFixed(2);\n      setEthPrice(simulatedPrice);\n    } catch (error) {\n      console.error(\"Error fetching ETH price\", error);\n    }\n  };\n\n  // Refresh data function\n  const refreshData = useCallback(async () => {\n    if (web3 && account) {\n      await fetchEthPrice();\n    }\n  }, [web3, account]);\n\n  // Initialize web3 on component mount\n  useEffect(() => {\n    initializeWeb3();\n\n    // Set up interval to refresh ETH price\n    const interval = setInterval(() => {\n      if (web3 && account) {\n        fetchEthPrice();\n      }\n    }, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Context value\n  const contextValue = {\n    web3,\n    account,\n    networkId,\n    contracts,\n    loading,\n    error,\n    ethPrice,\n    connectWallet,\n    refreshData\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the web3 context\n_s(Web3Provider, \"rvbUKdnme52iRURn8DriyKI+bWQ=\");\n_c = Web3Provider;\nexport const useWeb3 = () => {\n  _s2();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s2(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradingABI","MockTokenABI","LiquidationEngineABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTrading","mockToken","liquidationEngine","Web3Provider","children","_s","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","ethPrice","setEthPrice","initializeWeb3","web3Instance","window","ethereum","request","method","accounts","eth","getAccounts","net","getId","on","location","reload","initializeContracts","console","addresses","log","Contract","abi","fetchEthPrice","contractError","connectWallet","basePrice","randomVariation","Math","random","simulatedPrice","toFixed","refreshData","interval","setInterval","clearInterval","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs - use the correct paths and names\nimport MarginTradingABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\nimport LiquidationEngineABI from '../contracts/MockPriceFeed.json'; // Using MockPriceFeed as LiquidationEngine for now\n\n// Create context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet - using the exact addresses provided\nconst CONTRACT_ADDRESSES = {\n    11155111: { // Sepolia\n        marginTrading: '0xfD79e1b120f3aE000f2d79aCEca92Aaec0B34C14',\n        mockToken: '0x6Bb00934FD4f6db39F475Bf39283981A20eCCe5b',\n        liquidationEngine: '0x290346048a11574A6bEb6E0B3B0E353b0bE1cD0D'\n    },\n    // Add other networks as needed\n};\n\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [ethPrice, setEthPrice] = useState('1500.00'); // Default price\n\n    // Initialize web3\n    const initializeWeb3 = async () => {\n        try {\n            let web3Instance;\n            \n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                web3Instance = new Web3(window.ethereum);\n                \n                try {\n                    // Request account access\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    \n                    // Get the connected account\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    \n                    // Set up event listeners for account and network changes\n                    window.ethereum.on('accountsChanged', (accounts) => {\n                        setAccount(accounts[0]);\n                    });\n                    \n                    window.ethereum.on('chainChanged', () => {\n                        window.location.reload();\n                    });\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    await initializeContracts(web3Instance, networkId);\n                    \n                } catch (error) {\n                    console.error(\"User denied account access\", error);\n                    setError(\"Please connect your MetaMask wallet to use this application.\");\n                }\n            } else {\n                console.error(\"MetaMask is not installed\");\n                setError(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing web3\", error);\n            setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Initialize contracts\n    const initializeContracts = async (web3Instance, networkId) => {\n        try {\n            // Check if the network is supported\n            if (!CONTRACT_ADDRESSES[networkId]) {\n                console.error(`Network ID ${networkId} not supported`);\n                setError(`Network not supported. Please switch to Sepolia testnet.`);\n                return;\n            }\n            \n            const addresses = CONTRACT_ADDRESSES[networkId];\n            \n            console.log(\"Initializing contracts with addresses:\", addresses);\n            \n            try {\n                // Initialize contracts with proper error handling\n                const marginTrading = new web3Instance.eth.Contract(\n                    MarginTradingABI.abi, // Access the ABI property\n                    addresses.marginTrading\n                );\n                \n                const mockToken = new web3Instance.eth.Contract(\n                    MockTokenABI.abi, // Access the ABI property\n                    addresses.mockToken\n                );\n                \n                const liquidationEngine = new web3Instance.eth.Contract(\n                    LiquidationEngineABI.abi, // Access the ABI property\n                    addresses.liquidationEngine\n                );\n                \n                console.log(\"Contracts initialized successfully\");\n                \n                setContracts({\n                    marginTrading,\n                    mockToken,\n                    liquidationEngine\n                });\n                \n                // Fetch initial ETH price\n                await fetchEthPrice();\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to initialize contract instances. Please check the contract ABIs and addresses.\");\n                return;\n            }\n            \n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n        }\n    };\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        setLoading(true);\n        setError(null);\n        await initializeWeb3();\n    };\n\n    // Fetch ETH price (simulated for now)\n    const fetchEthPrice = async () => {\n        try {\n            // In a real application, you would fetch this from an oracle or API\n            // For now, we'll simulate a price with some random variation\n            const basePrice = 1500;\n            const randomVariation = Math.random() * 200 - 100; // -100 to +100\n            const simulatedPrice = (basePrice + randomVariation).toFixed(2);\n            setEthPrice(simulatedPrice);\n        } catch (error) {\n            console.error(\"Error fetching ETH price\", error);\n        }\n    };\n\n    // Refresh data function\n    const refreshData = useCallback(async () => {\n        if (web3 && account) {\n            await fetchEthPrice();\n        }\n    }, [web3, account]);\n\n    // Initialize web3 on component mount\n    useEffect(() => {\n        initializeWeb3();\n        \n        // Set up interval to refresh ETH price\n        const interval = setInterval(() => {\n            if (web3 && account) {\n                fetchEthPrice();\n            }\n        }, 30000); // Every 30 seconds\n        \n        return () => clearInterval(interval);\n    }, []);\n\n    // Context value\n    const contextValue = {\n        web3,\n        account,\n        networkId,\n        contracts,\n        loading,\n        error,\n        ethPrice,\n        connectWallet,\n        refreshData\n    };\n\n    return (\n        <Web3Context.Provider value={contextValue}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n\n// Custom hook to use the web3 context\nexport const useWeb3 = () => {\n    const context = useContext(Web3Context);\n    if (!context) {\n        throw new Error('useWeb3 must be used within a Web3Provider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}