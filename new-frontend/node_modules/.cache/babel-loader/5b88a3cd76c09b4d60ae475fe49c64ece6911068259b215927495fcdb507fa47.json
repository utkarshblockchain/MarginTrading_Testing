{"ast":null,"code":"import React,{useState}from'react';import{useWeb3}from'../context/Web3Context';import'../styles/DepositMargin.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DepositMargin=()=>{const{web3,contracts,account,isInitialized,ethMargin,tokenMargin,fetchUserPositions}=useWeb3();const[amount,setAmount]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[success,setSuccess]=useState(false);const[successMessage,setSuccessMessage]=useState('');const handleDepositETH=async()=>{try{setLoading(true);setError(null);setSuccess(false);// Check if web3 and contracts are initialized\nif(!web3||!contracts.marginTradeManager||!account){throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");}const weiAmount=web3.utils.toWei(amount,'ether');console.log(`Depositing ${amount} ETH (${weiAmount} wei) as margin`);// Call the depositMargin function with ETH value\nconst transaction=await contracts.marginTradeManager.methods.depositMargin().send({from:account,value:weiAmount});console.log(\"ETH deposit transaction successful:\",transaction);setSuccessMessage(`Successfully deposited ${amount} ETH as margin`);setSuccess(true);// Add a small delay before refreshing user position data\nsetTimeout(()=>{fetchUserPositions();console.log(\"Refreshing user positions after ETH deposit\");},2000);setAmount('');}catch(error){console.error(\"Error depositing ETH:\",error);setError(error.message||\"Failed to deposit ETH. Please try again.\");}finally{setLoading(false);}};const handleDepositToken=async()=>{try{setLoading(true);setError(null);setSuccess(false);// Check if web3 and contracts are initialized\nif(!web3||!contracts.marginTradeManager||!contracts.mockToken||!account){throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");}const weiAmount=web3.utils.toWei(amount,'ether');console.log(`Depositing ${amount} tokens (${weiAmount} wei) as margin`);// Check if the token is supported\ntry{const isSupported=await contracts.marginTradeManager.methods.supportedCollateralTokens(contracts.mockToken.options.address).call();if(!isSupported){throw new Error(\"This token is not supported for margin deposits. Please contact the administrator.\");}}catch(error){console.error(\"Error checking if token is supported:\",error);throw new Error(\"Failed to verify token support. Please try again later.\");}// Check token balance\ntry{const balance=await contracts.mockToken.methods.balanceOf(account).call();const balanceInEther=web3.utils.fromWei(balance,'ether');console.log(`Token balance: ${balanceInEther} tokens`);if(web3.utils.toBN(balance).lt(web3.utils.toBN(weiAmount))){throw new Error(`Insufficient token balance. You have ${balanceInEther} tokens, but trying to deposit ${amount} tokens.`);}}catch(error){if(error.message.includes(\"Insufficient\")){throw error;}console.error(\"Error checking token balance:\",error);throw new Error(\"Failed to check token balance. Please try again later.\");}// First approve the token transfer\nconsole.log(\"Approving token transfer...\");try{const approvalTx=await contracts.mockToken.methods.approve(contracts.marginTradeManager.options.address,weiAmount).send({from:account});console.log(\"Token approval successful:\",approvalTx);}catch(error){console.error(\"Error approving token transfer:\",error);throw new Error(\"Failed to approve token transfer. Please try again.\");}// Then deposit the tokens\nconsole.log(\"Depositing tokens...\");try{const depositTx=await contracts.marginTradeManager.methods.depositMarginERC20(contracts.mockToken.options.address,weiAmount).send({from:account});console.log(\"Token deposit transaction successful:\",depositTx);setSuccessMessage(`Successfully deposited ${amount} tokens as margin`);setSuccess(true);// Add a small delay before refreshing user position data\nsetTimeout(()=>{fetchUserPositions();console.log(\"Refreshing user positions after token deposit\");},2000);setAmount('');}catch(error){console.error(\"Error depositing tokens:\",error);throw new Error(\"Failed to deposit tokens. The transaction was rejected by the contract.\");}}catch(error){console.error(\"Error in deposit token process:\",error);setError(error.message||\"Failed to deposit tokens. Please try again.\");}finally{setLoading(false);}};// Clear success message after 5 seconds\nReact.useEffect(()=>{if(success){const timer=setTimeout(()=>{setSuccess(false);},5000);return()=>clearTimeout(timer);}},[success]);return/*#__PURE__*/_jsxs(\"div\",{className:\"deposit-margin card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Deposit Margin\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"margin-info\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Current ETH Margin: \",ethMargin,\" ETH\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Current Token Margin: \",tokenMargin,\" Tokens\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"note\",children:\"Note: You must deposit margin before opening a position.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Amount to Deposit\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:amount,onChange:e=>setAmount(e.target.value),placeholder:\"Enter amount\",step:\"0.01\",min:\"0.01\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn primary\",onClick:handleDepositETH,disabled:loading||!isInitialized||!amount,children:loading?\"Processing...\":\"Deposit ETH\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn secondary\",onClick:handleDepositToken,disabled:loading||!isInitialized||!amount,children:loading?\"Processing...\":\"Deposit Token\"})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}),success&&/*#__PURE__*/_jsx(\"p\",{className:\"success-message\",children:successMessage}),!isInitialized&&/*#__PURE__*/_jsx(\"p\",{className:\"warning-message\",children:\"Please connect your wallet to deposit margin.\"})]});};export default DepositMargin;","map":{"version":3,"names":["React","useState","useWeb3","jsx","_jsx","jsxs","_jsxs","DepositMargin","web3","contracts","account","isInitialized","ethMargin","tokenMargin","fetchUserPositions","amount","setAmount","loading","setLoading","error","setError","success","setSuccess","successMessage","setSuccessMessage","handleDepositETH","marginTradeManager","Error","weiAmount","utils","toWei","console","log","transaction","methods","depositMargin","send","from","value","setTimeout","message","handleDepositToken","mockToken","isSupported","supportedCollateralTokens","options","address","call","balance","balanceOf","balanceInEther","fromWei","toBN","lt","includes","approvalTx","approve","depositTx","depositMarginERC20","useEffect","timer","clearTimeout","className","children","type","onChange","e","target","placeholder","step","min","onClick","disabled"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/new-frontend/src/components/DepositMargin.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositMargin.css';\n\nconst DepositMargin = () => {\n    const { web3, contracts, account, isInitialized, ethMargin, tokenMargin, fetchUserPositions } = useWeb3();\n    const [amount, setAmount] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(false);\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const handleDepositETH = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(false);\n\n            // Check if web3 and contracts are initialized\n            if (!web3 || !contracts.marginTradeManager || !account) {\n                throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n            }\n\n            const weiAmount = web3.utils.toWei(amount, 'ether');\n            console.log(`Depositing ${amount} ETH (${weiAmount} wei) as margin`);\n\n            // Call the depositMargin function with ETH value\n            const transaction = await contracts.marginTradeManager.methods.depositMargin()\n                .send({ from: account, value: weiAmount });\n\n            console.log(\"ETH deposit transaction successful:\", transaction);\n            setSuccessMessage(`Successfully deposited ${amount} ETH as margin`);\n            setSuccess(true);\n            \n            // Add a small delay before refreshing user position data\n            setTimeout(() => {\n                fetchUserPositions();\n                console.log(\"Refreshing user positions after ETH deposit\");\n            }, 2000);\n            \n            setAmount('');\n        } catch (error) {\n            console.error(\"Error depositing ETH:\", error);\n            setError(error.message || \"Failed to deposit ETH. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDepositToken = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(false);\n\n            // Check if web3 and contracts are initialized\n            if (!web3 || !contracts.marginTradeManager || !contracts.mockToken || !account) {\n                throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n            }\n\n            const weiAmount = web3.utils.toWei(amount, 'ether');\n            console.log(`Depositing ${amount} tokens (${weiAmount} wei) as margin`);\n\n            // Check if the token is supported\n            try {\n                const isSupported = await contracts.marginTradeManager.methods.supportedCollateralTokens(\n                    contracts.mockToken.options.address\n                ).call();\n                \n                if (!isSupported) {\n                    throw new Error(\"This token is not supported for margin deposits. Please contact the administrator.\");\n                }\n            } catch (error) {\n                console.error(\"Error checking if token is supported:\", error);\n                throw new Error(\"Failed to verify token support. Please try again later.\");\n            }\n\n            // Check token balance\n            try {\n                const balance = await contracts.mockToken.methods.balanceOf(account).call();\n                const balanceInEther = web3.utils.fromWei(balance, 'ether');\n                console.log(`Token balance: ${balanceInEther} tokens`);\n                \n                if (web3.utils.toBN(balance).lt(web3.utils.toBN(weiAmount))) {\n                    throw new Error(`Insufficient token balance. You have ${balanceInEther} tokens, but trying to deposit ${amount} tokens.`);\n                }\n            } catch (error) {\n                if (error.message.includes(\"Insufficient\")) {\n                    throw error;\n                }\n                console.error(\"Error checking token balance:\", error);\n                throw new Error(\"Failed to check token balance. Please try again later.\");\n            }\n\n            // First approve the token transfer\n            console.log(\"Approving token transfer...\");\n            try {\n                const approvalTx = await contracts.mockToken.methods.approve(\n                    contracts.marginTradeManager.options.address,\n                    weiAmount\n                ).send({ from: account });\n                \n                console.log(\"Token approval successful:\", approvalTx);\n            } catch (error) {\n                console.error(\"Error approving token transfer:\", error);\n                throw new Error(\"Failed to approve token transfer. Please try again.\");\n            }\n\n            // Then deposit the tokens\n            console.log(\"Depositing tokens...\");\n            try {\n                const depositTx = await contracts.marginTradeManager.methods.depositMarginERC20(\n                    contracts.mockToken.options.address,\n                    weiAmount\n                ).send({ from: account });\n\n                console.log(\"Token deposit transaction successful:\", depositTx);\n                setSuccessMessage(`Successfully deposited ${amount} tokens as margin`);\n                setSuccess(true);\n                \n                // Add a small delay before refreshing user position data\n                setTimeout(() => {\n                    fetchUserPositions();\n                    console.log(\"Refreshing user positions after token deposit\");\n                }, 2000);\n                \n                setAmount('');\n            } catch (error) {\n                console.error(\"Error depositing tokens:\", error);\n                throw new Error(\"Failed to deposit tokens. The transaction was rejected by the contract.\");\n            }\n        } catch (error) {\n            console.error(\"Error in deposit token process:\", error);\n            setError(error.message || \"Failed to deposit tokens. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Clear success message after 5 seconds\n    React.useEffect(() => {\n        if (success) {\n            const timer = setTimeout(() => {\n                setSuccess(false);\n            }, 5000);\n            return () => clearTimeout(timer);\n        }\n    }, [success]);\n\n    return (\n        <div className=\"deposit-margin card\">\n            <h2>Deposit Margin</h2>\n            \n            <div className=\"margin-info\">\n                <p>Current ETH Margin: {ethMargin} ETH</p>\n                <p>Current Token Margin: {tokenMargin} Tokens</p>\n                <p className=\"note\">Note: You must deposit margin before opening a position.</p>\n            </div>\n            \n            <div className=\"input-group\">\n                <label>Amount to Deposit</label>\n                <input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"Enter amount\"\n                    step=\"0.01\"\n                    min=\"0.01\"\n                />\n            </div>\n            \n            <div className=\"button-group\">\n                <button\n                    className=\"btn primary\"\n                    onClick={handleDepositETH}\n                    disabled={loading || !isInitialized || !amount}\n                >\n                    {loading ? \"Processing...\" : \"Deposit ETH\"}\n                </button>\n                <button\n                    className=\"btn secondary\"\n                    onClick={handleDepositToken}\n                    disabled={loading || !isInitialized || !amount}\n                >\n                    {loading ? \"Processing...\" : \"Deposit Token\"}\n                </button>\n            </div>\n            \n            {error && <p className=\"error-message\">{error}</p>}\n            {success && <p className=\"success-message\">{successMessage}</p>}\n            \n            {!isInitialized && (\n                <p className=\"warning-message\">Please connect your wallet to deposit margin.</p>\n            )}\n        </div>\n    );\n};\n\nexport default DepositMargin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}