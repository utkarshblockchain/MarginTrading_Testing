{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import Web3 from'web3';// Import ABIs\nimport MarginTradeManagerABI from'../abis/MarginTradeManager.json';import MockTokenABI from'../abis/MockToken.json';// Create the context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const Web3Context=/*#__PURE__*/createContext();// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES={marginTradeManager:\"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",mockToken:\"0x6399a31B08986628EAdfD6e616E58db75f6686f2\"};// Custom hook to use the Web3 context\nexport const useWeb3=()=>useContext(Web3Context);// Provider component\nexport const Web3Provider=_ref=>{let{children}=_ref;const[web3,setWeb3]=useState(null);const[account,setAccount]=useState(null);const[networkId,setNetworkId]=useState(null);const[contracts,setContracts]=useState({marginTradeManager:null,mockToken:null});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isInitialized,setIsInitialized]=useState(false);// Position and margin state\nconst[positions,setPositions]=useState([]);const[ethMargin,setEthMargin]=useState('0');const[tokenMargin,setTokenMargin]=useState('0');const[positionCount,setPositionCount]=useState(0);// Initialize contracts\nconst initializeContracts=useCallback(async web3Instance=>{console.log(\"Initializing contracts...\");try{if(!web3Instance){console.error(\"Web3 instance is null\");setError(\"Web3 instance is not available. Please refresh the page.\");return false;}try{// Create contract instances\nconst marginTradeManagerContract=new web3Instance.eth.Contract(MarginTradeManagerABI.abi,CONTRACT_ADDRESSES.marginTradeManager);const mockTokenContract=new web3Instance.eth.Contract(MockTokenABI.abi,CONTRACT_ADDRESSES.mockToken);// Set the contracts in state\nsetContracts({marginTradeManager:marginTradeManagerContract,mockToken:mockTokenContract});console.log(\"Contracts initialized successfully:\",{marginTradeManager:marginTradeManagerContract.options.address,mockToken:mockTokenContract.options.address});setIsInitialized(true);setLoading(false);return true;}catch(contractError){console.error(\"Error creating contract instances:\",contractError);setError(\"Failed to create contract instances. Please check your network connection.\");setLoading(false);return false;}}catch(error){console.error(\"Error initializing contracts:\",error);setError(\"Failed to initialize contracts. Please refresh the page and try again.\");setLoading(false);return false;}},[]);// Connect wallet function for button\nconst connectWallet=async()=>{if(window.ethereum){try{setLoading(true);const accounts=await window.ethereum.request({method:'eth_requestAccounts'});setAccount(accounts[0]);// Create a new web3 instance\nconst web3Instance=new Web3(window.ethereum);setWeb3(web3Instance);// Get network ID\nconst networkId=await web3Instance.eth.net.getId();setNetworkId(networkId);// Initialize contracts\nawait initializeContracts(web3Instance);setLoading(false);}catch(error){console.error(\"Error connecting wallet:\",error);setError(\"Failed to connect wallet. Please try again.\");setLoading(false);}}else{setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");setLoading(false);}};// Initialize web3\nconst init=useCallback(async()=>{try{setLoading(true);// Check if MetaMask is installed\nif(window.ethereum){try{// Create a new web3 instance\nconst web3Instance=new Web3(window.ethereum);// Get accounts\nconst accounts=await web3Instance.eth.getAccounts();if(accounts.length>0){setAccount(accounts[0]);console.log(\"Connected account:\",accounts[0]);}// Get network ID\nconst networkId=await web3Instance.eth.net.getId();setNetworkId(networkId);console.log(\"Connected to network ID:\",networkId);setWeb3(web3Instance);// Initialize contracts\nconst success=await initializeContracts(web3Instance);if(success){setIsInitialized(true);}}catch(innerError){console.error(\"Error in Ethereum connection:\",innerError);setError(\"Error connecting to Ethereum. Please refresh and try again.\");}}else{console.error(\"No Ethereum browser extension detected\");setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");}}catch(error){console.error(\"Error initializing web3:\",error);setError(\"Failed to initialize web3. Please refresh the page and try again.\");}finally{setLoading(false);}},[initializeContracts]);// Fetch user position data\nconst fetchUserPositions=useCallback(async()=>{if(!web3||!contracts.marginTradeManager||!account||!isInitialized){console.log(\"Cannot fetch positions: web3, contracts, or account not initialized\");return;}try{console.log(\"Fetching user position data...\");// Get position count\nconst count=await contracts.marginTradeManager.methods.userPositionCount(account).call();setPositionCount(parseInt(count));console.log(\"User position count:\",count);// Initialize arrays to calculate total margins\nlet totalEthMargin=web3.utils.toBN('0');let totalTokenMargin=web3.utils.toBN('0');const positionsData=[];// Fetch each position\nfor(let i=0;i<count;i++){const position=await contracts.marginTradeManager.methods.positions(account,i).call();console.log(`Position ${i}:`,position);// Add position to array\npositionsData.push({id:i,...position,isEth:position.collateralToken==='0x0000000000000000000000000000000000000000'});// Calculate margins\nconst margin=web3.utils.toBN(position.margin);if(position.collateralToken.toLowerCase()==='0x0000000000000000000000000000000000000000'){totalEthMargin=totalEthMargin.add(margin);}else if(position.collateralToken.toLowerCase()===contracts.mockToken.options.address.toLowerCase()){totalTokenMargin=totalTokenMargin.add(margin);}}// Update state\nsetPositions(positionsData);setEthMargin(web3.utils.fromWei(totalEthMargin,'ether'));setTokenMargin(web3.utils.fromWei(totalTokenMargin,'ether'));console.log(\"User margins calculated:\",{ethMargin:web3.utils.fromWei(totalEthMargin,'ether'),tokenMargin:web3.utils.fromWei(totalTokenMargin,'ether')});}catch(error){console.error(\"Error fetching user positions:\",error);}},[web3,contracts,account,isInitialized]);// Initialize on component mount\nuseEffect(()=>{init();// Setup event listeners for MetaMask\nif(window.ethereum){window.ethereum.on('accountsChanged',accounts=>{if(accounts.length>0){setAccount(accounts[0]);console.log(\"Account changed:\",accounts[0]);}else{setAccount(null);console.log(\"Account disconnected\");}});window.ethereum.on('chainChanged',()=>{console.log(\"Network changed, reloading page\");window.location.reload();});}return()=>{// Clean up event listeners\nif(window.ethereum){window.ethereum.removeListener('accountsChanged',()=>{});window.ethereum.removeListener('chainChanged',()=>{});}};},[init]);// Fetch user position data when account or contracts change\nuseEffect(()=>{if(isInitialized&&account){fetchUserPositions();// Set up an interval to fetch user position data every 30 seconds\nconst intervalId=setInterval(fetchUserPositions,30000);return()=>clearInterval(intervalId);}},[isInitialized,account,fetchUserPositions]);return/*#__PURE__*/_jsx(Web3Context.Provider,{value:{web3,account,networkId,contracts,loading,error,connectWallet,isInitialized,positions,ethMargin,tokenMargin,positionCount,fetchUserPositions},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","jsx","_jsx","Web3Context","CONTRACT_ADDRESSES","marginTradeManager","mockToken","useWeb3","Web3Provider","_ref","children","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","isInitialized","setIsInitialized","positions","setPositions","ethMargin","setEthMargin","tokenMargin","setTokenMargin","positionCount","setPositionCount","initializeContracts","web3Instance","console","log","marginTradeManagerContract","eth","Contract","abi","mockTokenContract","options","address","contractError","connectWallet","window","ethereum","accounts","request","method","net","getId","init","getAccounts","length","success","innerError","fetchUserPositions","count","methods","userPositionCount","call","parseInt","totalEthMargin","utils","toBN","totalTokenMargin","positionsData","i","position","push","id","isEth","collateralToken","margin","toLowerCase","add","fromWei","on","location","reload","removeListener","intervalId","setInterval","clearInterval","Provider","value"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/new-frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n    marginTradeManager: \"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",\n    mockToken: \"0x6399a31B08986628EAdfD6e616E58db75f6686f2\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTradeManager: null,\n        mockToken: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isInitialized, setIsInitialized] = useState(false);\n    \n    // Position and margin state\n    const [positions, setPositions] = useState([]);\n    const [ethMargin, setEthMargin] = useState('0');\n    const [tokenMargin, setTokenMargin] = useState('0');\n    const [positionCount, setPositionCount] = useState(0);\n\n    // Initialize contracts\n    const initializeContracts = useCallback(async (web3Instance) => {\n        console.log(\"Initializing contracts...\");\n        try {\n            if (!web3Instance) {\n                console.error(\"Web3 instance is null\");\n                setError(\"Web3 instance is not available. Please refresh the page.\");\n                return false;\n            }\n\n            try {\n                // Create contract instances\n                const marginTradeManagerContract = new web3Instance.eth.Contract(\n                    MarginTradeManagerABI.abi,\n                    CONTRACT_ADDRESSES.marginTradeManager\n                );\n\n                const mockTokenContract = new web3Instance.eth.Contract(\n                    MockTokenABI.abi,\n                    CONTRACT_ADDRESSES.mockToken\n                );\n\n                // Set the contracts in state\n                setContracts({\n                    marginTradeManager: marginTradeManagerContract,\n                    mockToken: mockTokenContract\n                });\n\n                console.log(\"Contracts initialized successfully:\", {\n                    marginTradeManager: marginTradeManagerContract.options.address,\n                    mockToken: mockTokenContract.options.address\n                });\n                \n                setIsInitialized(true);\n                setLoading(false);\n                return true;\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to create contract instances. Please check your network connection.\");\n                setLoading(false);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            setLoading(false);\n            return false;\n        }\n    }, []);\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                setLoading(true);\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n                \n                // Create a new web3 instance\n                const web3Instance = new Web3(window.ethereum);\n                setWeb3(web3Instance);\n                \n                // Get network ID\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                \n                // Initialize contracts\n                await initializeContracts(web3Instance);\n                \n                setLoading(false);\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n                setLoading(false);\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            setLoading(false);\n        }\n    };\n\n    // Initialize web3\n    const init = useCallback(async () => {\n        try {\n            setLoading(true);\n            \n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                try {\n                    // Create a new web3 instance\n                    const web3Instance = new Web3(window.ethereum);\n                    \n                    // Get accounts\n                    const accounts = await web3Instance.eth.getAccounts();\n                    if (accounts.length > 0) {\n                        setAccount(accounts[0]);\n                        console.log(\"Connected account:\", accounts[0]);\n                    }\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    console.log(\"Connected to network ID:\", networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    const success = await initializeContracts(web3Instance);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                } catch (innerError) {\n                    console.error(\"Error in Ethereum connection:\", innerError);\n                    setError(\"Error connecting to Ethereum. Please refresh and try again.\");\n                }\n            } else {\n                console.error(\"No Ethereum browser extension detected\");\n                setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing web3:\", error);\n            setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        } finally {\n            setLoading(false);\n        }\n    }, [initializeContracts]);\n\n    // Fetch user position data\n    const fetchUserPositions = useCallback(async () => {\n        if (!web3 || !contracts.marginTradeManager || !account || !isInitialized) {\n            console.log(\"Cannot fetch positions: web3, contracts, or account not initialized\");\n            return;\n        }\n        \n        try {\n            console.log(\"Fetching user position data...\");\n            \n            // Get position count\n            const count = await contracts.marginTradeManager.methods.userPositionCount(account).call();\n            setPositionCount(parseInt(count));\n            console.log(\"User position count:\", count);\n            \n            // Initialize arrays to calculate total margins\n            let totalEthMargin = web3.utils.toBN('0');\n            let totalTokenMargin = web3.utils.toBN('0');\n            const positionsData = [];\n            \n            // Fetch each position\n            for (let i = 0; i < count; i++) {\n                const position = await contracts.marginTradeManager.methods.positions(account, i).call();\n                console.log(`Position ${i}:`, position);\n                \n                // Add position to array\n                positionsData.push({\n                    id: i,\n                    ...position,\n                    isEth: position.collateralToken === '0x0000000000000000000000000000000000000000'\n                });\n                \n                // Calculate margins\n                const margin = web3.utils.toBN(position.margin);\n                if (position.collateralToken.toLowerCase() === '0x0000000000000000000000000000000000000000') {\n                    totalEthMargin = totalEthMargin.add(margin);\n                } else if (position.collateralToken.toLowerCase() === contracts.mockToken.options.address.toLowerCase()) {\n                    totalTokenMargin = totalTokenMargin.add(margin);\n                }\n            }\n            \n            // Update state\n            setPositions(positionsData);\n            setEthMargin(web3.utils.fromWei(totalEthMargin, 'ether'));\n            setTokenMargin(web3.utils.fromWei(totalTokenMargin, 'ether'));\n            \n            console.log(\"User margins calculated:\", {\n                ethMargin: web3.utils.fromWei(totalEthMargin, 'ether'),\n                tokenMargin: web3.utils.fromWei(totalTokenMargin, 'ether')\n            });\n        } catch (error) {\n            console.error(\"Error fetching user positions:\", error);\n        }\n    }, [web3, contracts, account, isInitialized]);\n\n    // Initialize on component mount\n    useEffect(() => {\n        init();\n        \n        // Setup event listeners for MetaMask\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    console.log(\"Account changed:\", accounts[0]);\n                } else {\n                    setAccount(null);\n                    console.log(\"Account disconnected\");\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                console.log(\"Network changed, reloading page\");\n                window.location.reload();\n            });\n        }\n        \n        return () => {\n            // Clean up event listeners\n            if (window.ethereum) {\n                window.ethereum.removeListener('accountsChanged', () => {});\n                window.ethereum.removeListener('chainChanged', () => {});\n            }\n        };\n    }, [init]);\n\n    // Fetch user position data when account or contracts change\n    useEffect(() => {\n        if (isInitialized && account) {\n            fetchUserPositions();\n            \n            // Set up an interval to fetch user position data every 30 seconds\n            const intervalId = setInterval(fetchUserPositions, 30000);\n            \n            return () => clearInterval(intervalId);\n        }\n    }, [isInitialized, account, fetchUserPositions]);\n\n    return (\n        <Web3Context.Provider value={{ \n            web3, \n            account, \n            networkId, \n            contracts, \n            loading, \n            error,\n            connectWallet,\n            isInitialized,\n            positions,\n            ethMargin,\n            tokenMargin,\n            positionCount,\n            fetchUserPositions\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}