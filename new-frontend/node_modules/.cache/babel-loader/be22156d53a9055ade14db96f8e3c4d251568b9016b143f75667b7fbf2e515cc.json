{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\new-frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n  marginTradeManager: \"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",\n  mockToken: \"0x6399a31B08986628EAdfD6e616E58db75f6686f2\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n\n// Provider component\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [contracts, setContracts] = useState({\n    marginTradeManager: null,\n    mockToken: null\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Position and margin state\n  const [positions, setPositions] = useState([]);\n  const [ethMargin, setEthMargin] = useState('0');\n  const [tokenMargin, setTokenMargin] = useState('0');\n  const [positionCount, setPositionCount] = useState(0);\n\n  // Initialize contracts\n  const initializeContracts = useCallback(async web3Instance => {\n    console.log(\"Initializing contracts...\");\n    try {\n      if (!web3Instance) {\n        console.error(\"Web3 instance is null\");\n        setError(\"Web3 instance is not available. Please refresh the page.\");\n        return false;\n      }\n      try {\n        // Create contract instances\n        const marginTradeManagerContract = new web3Instance.eth.Contract(MarginTradeManagerABI.abi, CONTRACT_ADDRESSES.marginTradeManager);\n        const mockTokenContract = new web3Instance.eth.Contract(MockTokenABI.abi, CONTRACT_ADDRESSES.mockToken);\n\n        // Set the contracts in state\n        setContracts({\n          marginTradeManager: marginTradeManagerContract,\n          mockToken: mockTokenContract\n        });\n        console.log(\"Contracts initialized successfully:\", {\n          marginTradeManager: marginTradeManagerContract.options.address,\n          mockToken: mockTokenContract.options.address\n        });\n        setIsInitialized(true);\n        setLoading(false);\n        return true;\n      } catch (contractError) {\n        console.error(\"Error creating contract instances:\", contractError);\n        setError(\"Failed to create contract instances. Please check your network connection.\");\n        setLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error initializing contracts:\", error);\n      setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n      setLoading(false);\n      return false;\n    }\n  }, []);\n\n  // Connect wallet function for button\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        setLoading(true);\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n\n        // Create a new web3 instance\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n\n        // Get network ID\n        const networkId = await web3Instance.eth.net.getId();\n        setNetworkId(networkId);\n\n        // Initialize contracts\n        await initializeContracts(web3Instance);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        setError(\"Failed to connect wallet. Please try again.\");\n        setLoading(false);\n      }\n    } else {\n      setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      setLoading(false);\n    }\n  };\n\n  // Initialize web3\n  const init = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        try {\n          // Create a new web3 instance\n          const web3Instance = new Web3(window.ethereum);\n\n          // Get accounts\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n            console.log(\"Connected account:\", accounts[0]);\n          }\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n          console.log(\"Connected to network ID:\", networkId);\n          setWeb3(web3Instance);\n\n          // Initialize contracts\n          const success = await initializeContracts(web3Instance);\n          if (success) {\n            setIsInitialized(true);\n          }\n        } catch (innerError) {\n          console.error(\"Error in Ethereum connection:\", innerError);\n          setError(\"Error connecting to Ethereum. Please refresh and try again.\");\n        }\n      } else {\n        console.error(\"No Ethereum browser extension detected\");\n        setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n      }\n    } catch (error) {\n      console.error(\"Error initializing web3:\", error);\n      setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [initializeContracts]);\n\n  // Fetch user position data\n  const fetchUserPositions = useCallback(async () => {\n    if (!web3 || !contracts.marginTradeManager || !account || !isInitialized) return;\n    try {\n      console.log(\"Fetching user position data...\");\n\n      // Get position count\n      const count = await contracts.marginTradeManager.methods.userPositionCount(account).call();\n      setPositionCount(parseInt(count));\n      console.log(\"User position count:\", count);\n\n      // Initialize arrays to calculate total margins\n      let totalEthMargin = web3.utils.toBN('0');\n      let totalTokenMargin = web3.utils.toBN('0');\n      const positionsData = [];\n\n      // Fetch each position\n      for (let i = 0; i < count; i++) {\n        const position = await contracts.marginTradeManager.methods.positions(account, i).call();\n        console.log(`Position ${i}:`, position);\n\n        // Add position to array\n        positionsData.push({\n          id: i,\n          ...position,\n          isEth: position.collateralToken === '0x0000000000000000000000000000000000000000'\n        });\n\n        // Calculate margins\n        const margin = web3.utils.toBN(position.margin);\n        if (position.collateralToken === '0x0000000000000000000000000000000000000000') {\n          totalEthMargin = totalEthMargin.add(margin);\n        } else if (position.collateralToken === contracts.mockToken.options.address) {\n          totalTokenMargin = totalTokenMargin.add(margin);\n        }\n      }\n\n      // Update state\n      setPositions(positionsData);\n      setEthMargin(web3.utils.fromWei(totalEthMargin, 'ether'));\n      setTokenMargin(web3.utils.fromWei(totalTokenMargin, 'ether'));\n      console.log(\"User margins calculated:\", {\n        ethMargin: web3.utils.fromWei(totalEthMargin, 'ether'),\n        tokenMargin: web3.utils.fromWei(totalTokenMargin, 'ether')\n      });\n    } catch (error) {\n      console.error(\"Error fetching user positions:\", error);\n    }\n  }, [web3, contracts, account, isInitialized]);\n\n  // Initialize on component mount\n  useEffect(() => {\n    init();\n\n    // Setup event listeners for MetaMask\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          console.log(\"Account changed:\", accounts[0]);\n        } else {\n          setAccount(null);\n          console.log(\"Account disconnected\");\n        }\n      });\n      window.ethereum.on('chainChanged', () => {\n        console.log(\"Network changed, reloading page\");\n        window.location.reload();\n      });\n    }\n    return () => {\n      // Clean up event listeners\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', () => {});\n        window.ethereum.removeListener('chainChanged', () => {});\n      }\n    };\n  }, [init]);\n\n  // Fetch user position data when account or contracts change\n  useEffect(() => {\n    if (isInitialized && account) {\n      fetchUserPositions();\n\n      // Set up an interval to fetch user position data every 30 seconds\n      const intervalId = setInterval(fetchUserPositions, 30000);\n      return () => clearInterval(intervalId);\n    }\n  }, [isInitialized, account, fetchUserPositions]);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      account,\n      networkId,\n      contracts,\n      loading,\n      error,\n      connectWallet,\n      isInitialized,\n      positions,\n      ethMargin,\n      tokenMargin,\n      positionCount,\n      fetchUserPositions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 9\n  }, this);\n};\n_s2(Web3Provider, \"YHsMg6A69WPRL2kBHELJpcR4wXg=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","Web3","MarginTradeManagerABI","MockTokenABI","jsxDEV","_jsxDEV","Web3Context","CONTRACT_ADDRESSES","marginTradeManager","mockToken","useWeb3","_s","Web3Provider","children","_s2","web3","setWeb3","account","setAccount","networkId","setNetworkId","contracts","setContracts","loading","setLoading","error","setError","isInitialized","setIsInitialized","positions","setPositions","ethMargin","setEthMargin","tokenMargin","setTokenMargin","positionCount","setPositionCount","initializeContracts","web3Instance","console","log","marginTradeManagerContract","eth","Contract","abi","mockTokenContract","options","address","contractError","connectWallet","window","ethereum","accounts","request","method","net","getId","init","getAccounts","length","success","innerError","fetchUserPositions","count","methods","userPositionCount","call","parseInt","totalEthMargin","utils","toBN","totalTokenMargin","positionsData","i","position","push","id","isEth","collateralToken","margin","add","fromWei","on","location","reload","removeListener","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/new-frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport Web3 from 'web3';\n\n// Import ABIs\nimport MarginTradeManagerABI from '../abis/MarginTradeManager.json';\nimport MockTokenABI from '../abis/MockToken.json';\n\n// Create the context\nconst Web3Context = createContext();\n\n// Contract addresses for Sepolia testnet\nconst CONTRACT_ADDRESSES = {\n    marginTradeManager: \"0x69189D25Cf04ba71C5feec4C8Cc6f2a9B8986834\",\n    mockToken: \"0x6399a31B08986628EAdfD6e616E58db75f6686f2\"\n};\n\n// Custom hook to use the Web3 context\nexport const useWeb3 = () => useContext(Web3Context);\n\n// Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [networkId, setNetworkId] = useState(null);\n    const [contracts, setContracts] = useState({\n        marginTradeManager: null,\n        mockToken: null\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isInitialized, setIsInitialized] = useState(false);\n    \n    // Position and margin state\n    const [positions, setPositions] = useState([]);\n    const [ethMargin, setEthMargin] = useState('0');\n    const [tokenMargin, setTokenMargin] = useState('0');\n    const [positionCount, setPositionCount] = useState(0);\n\n    // Initialize contracts\n    const initializeContracts = useCallback(async (web3Instance) => {\n        console.log(\"Initializing contracts...\");\n        try {\n            if (!web3Instance) {\n                console.error(\"Web3 instance is null\");\n                setError(\"Web3 instance is not available. Please refresh the page.\");\n                return false;\n            }\n\n            try {\n                // Create contract instances\n                const marginTradeManagerContract = new web3Instance.eth.Contract(\n                    MarginTradeManagerABI.abi,\n                    CONTRACT_ADDRESSES.marginTradeManager\n                );\n\n                const mockTokenContract = new web3Instance.eth.Contract(\n                    MockTokenABI.abi,\n                    CONTRACT_ADDRESSES.mockToken\n                );\n\n                // Set the contracts in state\n                setContracts({\n                    marginTradeManager: marginTradeManagerContract,\n                    mockToken: mockTokenContract\n                });\n\n                console.log(\"Contracts initialized successfully:\", {\n                    marginTradeManager: marginTradeManagerContract.options.address,\n                    mockToken: mockTokenContract.options.address\n                });\n                \n                setIsInitialized(true);\n                setLoading(false);\n                return true;\n            } catch (contractError) {\n                console.error(\"Error creating contract instances:\", contractError);\n                setError(\"Failed to create contract instances. Please check your network connection.\");\n                setLoading(false);\n                return false;\n            }\n        } catch (error) {\n            console.error(\"Error initializing contracts:\", error);\n            setError(\"Failed to initialize contracts. Please refresh the page and try again.\");\n            setLoading(false);\n            return false;\n        }\n    }, []);\n\n    // Connect wallet function for button\n    const connectWallet = async () => {\n        if (window.ethereum) {\n            try {\n                setLoading(true);\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                setAccount(accounts[0]);\n                \n                // Create a new web3 instance\n                const web3Instance = new Web3(window.ethereum);\n                setWeb3(web3Instance);\n                \n                // Get network ID\n                const networkId = await web3Instance.eth.net.getId();\n                setNetworkId(networkId);\n                \n                // Initialize contracts\n                await initializeContracts(web3Instance);\n                \n                setLoading(false);\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                setError(\"Failed to connect wallet. Please try again.\");\n                setLoading(false);\n            }\n        } else {\n            setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            setLoading(false);\n        }\n    };\n\n    // Initialize web3\n    const init = useCallback(async () => {\n        try {\n            setLoading(true);\n            \n            // Check if MetaMask is installed\n            if (window.ethereum) {\n                try {\n                    // Create a new web3 instance\n                    const web3Instance = new Web3(window.ethereum);\n                    \n                    // Get accounts\n                    const accounts = await web3Instance.eth.getAccounts();\n                    if (accounts.length > 0) {\n                        setAccount(accounts[0]);\n                        console.log(\"Connected account:\", accounts[0]);\n                    }\n                    \n                    // Get network ID\n                    const networkId = await web3Instance.eth.net.getId();\n                    setNetworkId(networkId);\n                    console.log(\"Connected to network ID:\", networkId);\n                    \n                    setWeb3(web3Instance);\n                    \n                    // Initialize contracts\n                    const success = await initializeContracts(web3Instance);\n                    if (success) {\n                        setIsInitialized(true);\n                    }\n                } catch (innerError) {\n                    console.error(\"Error in Ethereum connection:\", innerError);\n                    setError(\"Error connecting to Ethereum. Please refresh and try again.\");\n                }\n            } else {\n                console.error(\"No Ethereum browser extension detected\");\n                setError(\"No Ethereum browser extension detected. Please install MetaMask to use this application.\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing web3:\", error);\n            setError(\"Failed to initialize web3. Please refresh the page and try again.\");\n        } finally {\n            setLoading(false);\n        }\n    }, [initializeContracts]);\n\n    // Fetch user position data\n    const fetchUserPositions = useCallback(async () => {\n        if (!web3 || !contracts.marginTradeManager || !account || !isInitialized) return;\n        \n        try {\n            console.log(\"Fetching user position data...\");\n            \n            // Get position count\n            const count = await contracts.marginTradeManager.methods.userPositionCount(account).call();\n            setPositionCount(parseInt(count));\n            console.log(\"User position count:\", count);\n            \n            // Initialize arrays to calculate total margins\n            let totalEthMargin = web3.utils.toBN('0');\n            let totalTokenMargin = web3.utils.toBN('0');\n            const positionsData = [];\n            \n            // Fetch each position\n            for (let i = 0; i < count; i++) {\n                const position = await contracts.marginTradeManager.methods.positions(account, i).call();\n                console.log(`Position ${i}:`, position);\n                \n                // Add position to array\n                positionsData.push({\n                    id: i,\n                    ...position,\n                    isEth: position.collateralToken === '0x0000000000000000000000000000000000000000'\n                });\n                \n                // Calculate margins\n                const margin = web3.utils.toBN(position.margin);\n                if (position.collateralToken === '0x0000000000000000000000000000000000000000') {\n                    totalEthMargin = totalEthMargin.add(margin);\n                } else if (position.collateralToken === contracts.mockToken.options.address) {\n                    totalTokenMargin = totalTokenMargin.add(margin);\n                }\n            }\n            \n            // Update state\n            setPositions(positionsData);\n            setEthMargin(web3.utils.fromWei(totalEthMargin, 'ether'));\n            setTokenMargin(web3.utils.fromWei(totalTokenMargin, 'ether'));\n            \n            console.log(\"User margins calculated:\", {\n                ethMargin: web3.utils.fromWei(totalEthMargin, 'ether'),\n                tokenMargin: web3.utils.fromWei(totalTokenMargin, 'ether')\n            });\n        } catch (error) {\n            console.error(\"Error fetching user positions:\", error);\n        }\n    }, [web3, contracts, account, isInitialized]);\n\n    // Initialize on component mount\n    useEffect(() => {\n        init();\n        \n        // Setup event listeners for MetaMask\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', (accounts) => {\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                    console.log(\"Account changed:\", accounts[0]);\n                } else {\n                    setAccount(null);\n                    console.log(\"Account disconnected\");\n                }\n            });\n\n            window.ethereum.on('chainChanged', () => {\n                console.log(\"Network changed, reloading page\");\n                window.location.reload();\n            });\n        }\n        \n        return () => {\n            // Clean up event listeners\n            if (window.ethereum) {\n                window.ethereum.removeListener('accountsChanged', () => {});\n                window.ethereum.removeListener('chainChanged', () => {});\n            }\n        };\n    }, [init]);\n\n    // Fetch user position data when account or contracts change\n    useEffect(() => {\n        if (isInitialized && account) {\n            fetchUserPositions();\n            \n            // Set up an interval to fetch user position data every 30 seconds\n            const intervalId = setInterval(fetchUserPositions, 30000);\n            \n            return () => clearInterval(intervalId);\n        }\n    }, [isInitialized, account, fetchUserPositions]);\n\n    return (\n        <Web3Context.Provider value={{ \n            web3, \n            account, \n            networkId, \n            contracts, \n            loading, \n            error,\n            connectWallet,\n            isInitialized,\n            positions,\n            ethMargin,\n            tokenMargin,\n            positionCount,\n            fetchUserPositions\n        }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}