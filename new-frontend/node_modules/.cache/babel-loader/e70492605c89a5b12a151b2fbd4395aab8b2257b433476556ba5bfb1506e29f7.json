{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTKARSH\\\\MarginTrading_Testing\\\\new-frontend\\\\src\\\\components\\\\DepositMargin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositMargin.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DepositMargin = () => {\n  _s();\n  const {\n    web3,\n    contracts,\n    account,\n    isInitialized,\n    ethMargin,\n    tokenMargin,\n    fetchUserPositions\n  } = useWeb3();\n  const [amount, setAmount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n  const handleDepositETH = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(false);\n\n      // Check if web3 and contracts are initialized\n      if (!web3 || !contracts.marginTradeManager || !account) {\n        throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n      }\n      const weiAmount = web3.utils.toWei(amount, 'ether');\n      console.log(`Depositing ${amount} ETH (${weiAmount} wei) as margin`);\n\n      // Call the depositMargin function with ETH value\n      const transaction = await contracts.marginTradeManager.methods.depositMargin().send({\n        from: account,\n        value: weiAmount\n      });\n      console.log(\"ETH deposit transaction successful:\", transaction);\n      setSuccessMessage(`Successfully deposited ${amount} ETH as margin`);\n      setSuccess(true);\n\n      // Add a small delay before refreshing user position data\n      setTimeout(() => {\n        fetchUserPositions();\n        console.log(\"Refreshing user positions after ETH deposit\");\n      }, 2000);\n      setAmount('');\n    } catch (error) {\n      console.error(\"Error depositing ETH:\", error);\n      setError(error.message || \"Failed to deposit ETH. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDepositToken = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(false);\n\n      // Check if web3 and contracts are initialized\n      if (!web3 || !contracts.marginTradeManager || !contracts.mockToken || !account) {\n        throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n      }\n      const weiAmount = web3.utils.toWei(amount, 'ether');\n      console.log(`Depositing ${amount} tokens (${weiAmount} wei) as margin`);\n\n      // Check if the token is supported\n      try {\n        const isSupported = await contracts.marginTradeManager.methods.supportedCollateralTokens(contracts.mockToken.options.address).call();\n        if (!isSupported) {\n          throw new Error(\"This token is not supported for margin deposits. Please contact the administrator.\");\n        }\n      } catch (error) {\n        console.error(\"Error checking if token is supported:\", error);\n        throw new Error(\"Failed to verify token support. Please try again later.\");\n      }\n\n      // Check token balance\n      try {\n        const balance = await contracts.mockToken.methods.balanceOf(account).call();\n        const balanceInEther = web3.utils.fromWei(balance, 'ether');\n        console.log(`Token balance: ${balanceInEther} tokens`);\n        if (web3.utils.toBN(balance).lt(web3.utils.toBN(weiAmount))) {\n          throw new Error(`Insufficient token balance. You have ${balanceInEther} tokens, but trying to deposit ${amount} tokens.`);\n        }\n      } catch (error) {\n        if (error.message.includes(\"Insufficient\")) {\n          throw error;\n        }\n        console.error(\"Error checking token balance:\", error);\n        throw new Error(\"Failed to check token balance. Please try again later.\");\n      }\n\n      // First approve the token transfer\n      console.log(\"Approving token transfer...\");\n      try {\n        const approvalTx = await contracts.mockToken.methods.approve(contracts.marginTradeManager.options.address, weiAmount).send({\n          from: account\n        });\n        console.log(\"Token approval successful:\", approvalTx);\n      } catch (error) {\n        console.error(\"Error approving token transfer:\", error);\n        throw new Error(\"Failed to approve token transfer. Please try again.\");\n      }\n\n      // Then deposit the tokens\n      console.log(\"Depositing tokens...\");\n      try {\n        const depositTx = await contracts.marginTradeManager.methods.depositMarginERC20(contracts.mockToken.options.address, weiAmount).send({\n          from: account\n        });\n        console.log(\"Token deposit transaction successful:\", depositTx);\n        setSuccessMessage(`Successfully deposited ${amount} tokens as margin`);\n        setSuccess(true);\n\n        // Add a small delay before refreshing user position data\n        setTimeout(() => {\n          fetchUserPositions();\n          console.log(\"Refreshing user positions after token deposit\");\n        }, 2000);\n        setAmount('');\n      } catch (error) {\n        console.error(\"Error depositing tokens:\", error);\n        throw new Error(\"Failed to deposit tokens. The transaction was rejected by the contract.\");\n      }\n    } catch (error) {\n      console.error(\"Error in deposit token process:\", error);\n      setError(error.message || \"Failed to deposit tokens. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear success message after 5 seconds\n  React.useEffect(() => {\n    if (success) {\n      const timer = setTimeout(() => {\n        setSuccess(false);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [success]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deposit-margin card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deposit Margin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"margin-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current ETH Margin: \", ethMargin, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Token Margin: \", tokenMargin, \" Tokens\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"note\",\n        children: \"Note: You must deposit margin before opening a position.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Amount to Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        placeholder: \"Enter amount\",\n        step: \"0.01\",\n        min: \"0.01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn primary\",\n        onClick: handleDepositETH,\n        disabled: loading || !isInitialized || !amount,\n        children: loading ? \"Processing...\" : \"Deposit ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn secondary\",\n        onClick: handleDepositToken,\n        disabled: loading || !isInitialized || !amount,\n        children: loading ? \"Processing...\" : \"Deposit Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }, this), !isInitialized && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"warning-message\",\n      children: \"Please connect your wallet to deposit margin.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(DepositMargin, \"Y030dAe5ciHVqLBBPI1TBZPpB0A=\", false, function () {\n  return [useWeb3];\n});\n_c = DepositMargin;\nexport default DepositMargin;\nvar _c;\n$RefreshReg$(_c, \"DepositMargin\");","map":{"version":3,"names":["React","useState","useWeb3","jsxDEV","_jsxDEV","DepositMargin","_s","web3","contracts","account","isInitialized","ethMargin","tokenMargin","fetchUserPositions","amount","setAmount","loading","setLoading","error","setError","success","setSuccess","successMessage","setSuccessMessage","handleDepositETH","marginTradeManager","Error","weiAmount","utils","toWei","console","log","transaction","methods","depositMargin","send","from","value","setTimeout","message","handleDepositToken","mockToken","isSupported","supportedCollateralTokens","options","address","call","balance","balanceOf","balanceInEther","fromWei","toBN","lt","includes","approvalTx","approve","depositTx","depositMarginERC20","useEffect","timer","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","step","min","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/UTKARSH/MarginTrading_Testing/new-frontend/src/components/DepositMargin.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWeb3 } from '../context/Web3Context';\nimport '../styles/DepositMargin.css';\n\nconst DepositMargin = () => {\n    const { web3, contracts, account, isInitialized, ethMargin, tokenMargin, fetchUserPositions } = useWeb3();\n    const [amount, setAmount] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(false);\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const handleDepositETH = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(false);\n\n            // Check if web3 and contracts are initialized\n            if (!web3 || !contracts.marginTradeManager || !account) {\n                throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n            }\n\n            const weiAmount = web3.utils.toWei(amount, 'ether');\n            console.log(`Depositing ${amount} ETH (${weiAmount} wei) as margin`);\n\n            // Call the depositMargin function with ETH value\n            const transaction = await contracts.marginTradeManager.methods.depositMargin()\n                .send({ from: account, value: weiAmount });\n\n            console.log(\"ETH deposit transaction successful:\", transaction);\n            setSuccessMessage(`Successfully deposited ${amount} ETH as margin`);\n            setSuccess(true);\n            \n            // Add a small delay before refreshing user position data\n            setTimeout(() => {\n                fetchUserPositions();\n                console.log(\"Refreshing user positions after ETH deposit\");\n            }, 2000);\n            \n            setAmount('');\n        } catch (error) {\n            console.error(\"Error depositing ETH:\", error);\n            setError(error.message || \"Failed to deposit ETH. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDepositToken = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            setSuccess(false);\n\n            // Check if web3 and contracts are initialized\n            if (!web3 || !contracts.marginTradeManager || !contracts.mockToken || !account) {\n                throw new Error(\"Web3 or contracts not initialized. Please connect your wallet.\");\n            }\n\n            const weiAmount = web3.utils.toWei(amount, 'ether');\n            console.log(`Depositing ${amount} tokens (${weiAmount} wei) as margin`);\n\n            // Check if the token is supported\n            try {\n                const isSupported = await contracts.marginTradeManager.methods.supportedCollateralTokens(\n                    contracts.mockToken.options.address\n                ).call();\n                \n                if (!isSupported) {\n                    throw new Error(\"This token is not supported for margin deposits. Please contact the administrator.\");\n                }\n            } catch (error) {\n                console.error(\"Error checking if token is supported:\", error);\n                throw new Error(\"Failed to verify token support. Please try again later.\");\n            }\n\n            // Check token balance\n            try {\n                const balance = await contracts.mockToken.methods.balanceOf(account).call();\n                const balanceInEther = web3.utils.fromWei(balance, 'ether');\n                console.log(`Token balance: ${balanceInEther} tokens`);\n                \n                if (web3.utils.toBN(balance).lt(web3.utils.toBN(weiAmount))) {\n                    throw new Error(`Insufficient token balance. You have ${balanceInEther} tokens, but trying to deposit ${amount} tokens.`);\n                }\n            } catch (error) {\n                if (error.message.includes(\"Insufficient\")) {\n                    throw error;\n                }\n                console.error(\"Error checking token balance:\", error);\n                throw new Error(\"Failed to check token balance. Please try again later.\");\n            }\n\n            // First approve the token transfer\n            console.log(\"Approving token transfer...\");\n            try {\n                const approvalTx = await contracts.mockToken.methods.approve(\n                    contracts.marginTradeManager.options.address,\n                    weiAmount\n                ).send({ from: account });\n                \n                console.log(\"Token approval successful:\", approvalTx);\n            } catch (error) {\n                console.error(\"Error approving token transfer:\", error);\n                throw new Error(\"Failed to approve token transfer. Please try again.\");\n            }\n\n            // Then deposit the tokens\n            console.log(\"Depositing tokens...\");\n            try {\n                const depositTx = await contracts.marginTradeManager.methods.depositMarginERC20(\n                    contracts.mockToken.options.address,\n                    weiAmount\n                ).send({ from: account });\n\n                console.log(\"Token deposit transaction successful:\", depositTx);\n                setSuccessMessage(`Successfully deposited ${amount} tokens as margin`);\n                setSuccess(true);\n                \n                // Add a small delay before refreshing user position data\n                setTimeout(() => {\n                    fetchUserPositions();\n                    console.log(\"Refreshing user positions after token deposit\");\n                }, 2000);\n                \n                setAmount('');\n            } catch (error) {\n                console.error(\"Error depositing tokens:\", error);\n                throw new Error(\"Failed to deposit tokens. The transaction was rejected by the contract.\");\n            }\n        } catch (error) {\n            console.error(\"Error in deposit token process:\", error);\n            setError(error.message || \"Failed to deposit tokens. Please try again.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Clear success message after 5 seconds\n    React.useEffect(() => {\n        if (success) {\n            const timer = setTimeout(() => {\n                setSuccess(false);\n            }, 5000);\n            return () => clearTimeout(timer);\n        }\n    }, [success]);\n\n    return (\n        <div className=\"deposit-margin card\">\n            <h2>Deposit Margin</h2>\n            \n            <div className=\"margin-info\">\n                <p>Current ETH Margin: {ethMargin} ETH</p>\n                <p>Current Token Margin: {tokenMargin} Tokens</p>\n                <p className=\"note\">Note: You must deposit margin before opening a position.</p>\n            </div>\n            \n            <div className=\"input-group\">\n                <label>Amount to Deposit</label>\n                <input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"Enter amount\"\n                    step=\"0.01\"\n                    min=\"0.01\"\n                />\n            </div>\n            \n            <div className=\"button-group\">\n                <button\n                    className=\"btn primary\"\n                    onClick={handleDepositETH}\n                    disabled={loading || !isInitialized || !amount}\n                >\n                    {loading ? \"Processing...\" : \"Deposit ETH\"}\n                </button>\n                <button\n                    className=\"btn secondary\"\n                    onClick={handleDepositToken}\n                    disabled={loading || !isInitialized || !amount}\n                >\n                    {loading ? \"Processing...\" : \"Deposit Token\"}\n                </button>\n            </div>\n            \n            {error && <p className=\"error-message\">{error}</p>}\n            {success && <p className=\"success-message\">{successMessage}</p>}\n            \n            {!isInitialized && (\n                <p className=\"warning-message\">Please connect your wallet to deposit margin.</p>\n            )}\n        </div>\n    );\n};\n\nexport default DepositMargin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}